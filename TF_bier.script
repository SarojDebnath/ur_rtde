def TF_biershow_250823():
  global _hidden_verificationVariable=0
  set_tcp(p[0.0,0.0,0.157,0.0,0.0,0.0])
  modbus_add_signal("192.168.1.101", 255, 1, 1, "ready_to_move", False)
  modbus_set_signal_update_frequency("ready_to_move", 10)
  modbus_add_signal("192.168.1.101", 255, 2, 0, "allowed_to_move", False)
  modbus_set_signal_update_frequency("allowed_to_move", 10)
  modbus_add_signal("192.168.1.101", 255, 3, 1, "standby", False)
  modbus_set_signal_update_frequency("standby", 10)
  modbus_set_runstate_dependent_choice("ready_to_move",0)
  modbus_set_runstate_dependent_choice("standby",0)
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(0.150000, [0.000000, 0.000000, 0.100000], [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 1)
  set_analog_outputdomain(1, 1)
  set_input_actions_to_default()
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  global Pallet_1_cnt=3
  global referencePoint=p[0.5474563102958362,0.6541654650937244,-0.46687505630886694,1.2021327494670466,2.902463524501732,-3.6040774637205476E-5]
  global separatorPoint=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Vacuum
  #################################################
  # Vacuum Grip Check
  #################################################
  
  vacuumGripCheckThread1 = 0
  vacuumGripCheckThread2 = 0
  vacuumGripCheckThread3 = 0
  vacuumGripCheckThread4 = 0
  vacuumGripCheckThread1Running = False
  vacuumGripCheckThread2Running = False
  vacuumGripCheckThread3Running = False
  vacuumGripCheckThread4Running = False
  vacuumGripCheckSocketId = "1"
  vacuumGripCheckThreadStarted = False
  
  thread vacuumGripCheck():
    gripper_socket = vacuumGripCheckSocketId
    vacuumGripCheckThreadStarted = True
  
    while (True):
      objectDetectedDebounceCtr = 0
  
      while (objectDetectedDebounceCtr < 3):
        if(rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectDetectedDebounceCtr = objectDetectedDebounceCtr + 1
        else:
          objectDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      objectNotDetectedDebounceCtr = 0
  
      while objectNotDetectedDebounceCtr < 3:
        if (not rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectNotDetectedDebounceCtr = objectNotDetectedDebounceCtr + 1
        else:
          objectNotDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      socket_open("127.0.0.1",29999,"dashboardServerSocket")
      socket_send_line("pause","dashboardServerSocket")
      socket_send_string("popup Vacuum grip check has detected an object drop.", "dashboardServerSocket")
      socket_send_byte(10, "dashboardServerSocket")
      socket_close("dashboardServerSocket")
  
      sleep(0.008)
    end
  end
  
  def startVacuumGripCheckThread(gripperId="1"):
    vacuumGripCheckSocketId = gripperId
    threadHandle = run vacuumGripCheck()
    waitForVacuumGripCheckThreadStarted()
    return threadHandle
  end
  
  def stopVacuumGripCheckThread(threadHandle):
    kill threadHandle
  end
  
  def waitForVacuumGripCheckThreadStarted():
    while (not(vacuumGripCheckThreadStarted)):
      sleep(0.008)
    end
    vacuumGripCheckThreadStarted = False
  end
  #################################################
  # End - Vacuum Grip Check
  #################################################
  
  #################################################
  # Stops the pump on a distance travelled
  #################################################
  global stopPumpDistance = 100
  global stopPumpSocketId = "0"
  global stopPumpThreadStarted = [False, False, False, False]
  global stopPumpThreadHandles = [0, 0, 0, 0]
  
  thread stopPumpOnDistanceTravelled():
    distance = stopPumpDistance
    socketId = stopPumpSocketId
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = True
  
    measuredDistance = waitForDistanceTravelled(distance)
  
    rq_stop(socketId)
  
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = False
  end
  
  def waitForDistanceTravelled(distance):
    startingPose = get_actual_tcp_pose()
    measuredDistance = 0
    while (measuredDistance < distance):
      sleep(0.1)
      measuredDistance = point_dist(get_actual_tcp_pose(), startingPose)
    end
  
    return measuredDistance
  end
  
  def startStopPumpOnDistanceTravelledThread(distance, gripper_socket="1"):
    if (stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]):
      return 0
    end
  
    global stopPumpDistance = distance
    global stopPumpSocketId = gripper_socket
    stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = run stopPumpOnDistanceTravelled()
    waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket)
    return stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
  end
  
  def waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket="1"):
    while (not(stopPumpThreadStarted[rq_socket_to_index(gripper_socket)])):
      sleep(0.008)
    end
  end
  
  def stopStopPumpOnDistanceTravelledThread(gripper_socket="1"):
    handle = stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
    threadIsRunning = stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]
    if (threadIsRunning):
      kill handle
      clear_socket_buffer(gripper_socket, 0.01)
      stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = 0
    end
  end
  #################################################
  # End - Stops the pump on a distance travelled
  #################################################
  
  #################################################
  # Vacuum general functions
  #################################################
  def rq_wait_for_vacuum_object_detected(gripper_socket="1"):
      while (not rq_is_vacuum_obj_detected(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_secured(gripper_socket="1"):
      while (not rq_is_vacuum_obj_secured(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_suction_complete(gripper_socket="1"):
      remaining_retries = 50
  
       # Wait for suction started
      while (not rq_is_vacuum_obj_in_suction(gripper_socket) and
             not rq_is_vacuum_obj_detected(gripper_socket) and
             remaining_retries > 0):
          sleep(0.01)
          remaining_retries = remaining_retries - 1
      end
  
      # Wait for suction completed
      while (rq_is_vacuum_obj_in_suction(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.01)
      end
  
      return True
  end
  
  def rq_wait_for_vacuum_object_not_detected(gripper_socket="1"):
      while (rq_is_vacuum_obj_detected(gripper_socket)):
          sleep(0.01)
      end
  end
  
  def rq_is_vacuum_obj_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_vacuum_obj_secured(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_secured(gOBJ)
  end
  
  def rq_is_vacuum_obj_in_suction(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
  
      if(is_vacuum_OBJ_object_in_motion(gOBJ)):
          return True
      else:
          return False
      end
  end
  
  def rq_is_vacuum_timeout(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
      sleep(0.008)
  
      if(gFLT ==6):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_in_motion(gOBJ):
      if (gOBJ == 0):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_detected(gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_secured(gOBJ):
      if (gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket="1"):
      rq_set_pos_spd_for(pressure, timeout, minimum, gripper_socket)
  end
  
  def rq_set_vacuum_and_wait(pressure, timeout, minimum, mode, gripper_socket="1"):
      rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
      gPRE = rq_get_var("PRE", 3, gripper_socket)
      while (gPRE != pressure):
          rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  
      rq_set_gripper_mode(mode, gripper_socket)
      gMOD = rq_get_var("MOD", 3, gripper_socket)
      while (gMOD != mode):
          rq_set_gripper_mode(mode, gripper_socket)
          sleep(0.008)
          gMOD = rq_get_var("MOD", 3, gripper_socket)
     end
  end
  
  def is_FLT_vacuum_timeout(gFLT):
    if (gFLT == 6):
        return True
    end
  
    return False
  end
  
  def is_continuous_grip(maximum_vacuum):
    return maximum_vacuum == 0
  end
  
  def rq_vacuum_release(advanced_mode=False, shutoff_distance_cm=5, wait_for_object_released=True, gripper_socket="1"):
    local shutoff_distance = scale(shutoff_distance_cm, [0, 99], [0.00, 0.99])
    local pressure = 255
    local minimum = 0
    local timeout = 255
    rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket)
  end
  
  def rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket):
    rq_reset_fault_and_activate(gripper_socket)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
    end
  
    # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
    # the communication driver reset the GTO bit
    rq_set_GTO_and_wait(1, gripper_socket)
  
    if wait_for_object_released:
      while (rq_is_vacuum_obj_detected(gripper_socket)):
  
        if advanced_mode:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
        else:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
        end
  
        # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
        # the communication driver reset the GTO bit
        rq_set_GTO_and_wait(1, gripper_socket)
        sleep(0.01)
      end
    end
  
    if advanced_mode:
      startStopPumpOnDistanceTravelledThread(shutoff_distance, gripper_socket)
    end
  end
  
  def rq_vacuum_grip(advanced_mode=False, maximum_vacuum=60, minimum_vacuum=40, timeout_ms=3000, wait_for_object_detected=True, gripper_socket="1"):
    local pressure = scale(maximum_vacuum, [0, 100], [100, 0])
    local minimum = scale(minimum_vacuum, [0, 100], [100, 0])
    local timeout = scale(timeout_ms, [0, 25500], [0, 255])
    rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket)
    if wait_for_object_detected:
          suction_completed = rq_wait_for_vacuum_object_suction_complete(gripper_socket)
          if(not suction_completed):
              rq_set_var("GTO", 0, gripper_socket)
          end
    end
  end
  
  def rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket):
    stopStopPumpOnDistanceTravelledThread(gripper_socket)
    rq_reset_fault_and_activate(gripper_socket)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  end
  
  def rq_reset_fault_and_activate(gripper_socket):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(not is_FLT_no_fault(gFLT)):
          if(is_FLT_vacuum_timeout(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
          elif(is_FLT_faulted(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
              rq_set_var("ACT", 1, gripper_socket)
          end
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_set_GTO_and_wait(0, gripper_socket)
          rq_set_var("ACT", 1, gripper_socket)
      end
  end
  #################################################
  # End - Vacuum general functions
  #################################################
  vacuumGripCheckWarningTitle = "Vacuum grip check"
  vacuumGripCheckWarningMessage = "Vacuum gripper object lost"
  vacuumGripTimeoutTitle = "Vacuum gripper fault"
  vacuumGripTimeoutMessage = "Grip has timed out"
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: triplea-wingman, 1.4.0, tripleA robotics ApS
  #   Type: AAA - WINGMAN
  global AAA = rpc_factory("xmlrpc", "http://127.0.0.1:19902/RPC2")
  def aaa_get_user_tcp(uuid):
  local tcp = AAA.server.getTCP(uuid)
  local rpy2rotvec = rpy2rotvec([d2r(tcp[3]), d2r(tcp[4]), d2r(tcp[5])])
  local pose = p[tcp[0], tcp[1], tcp[2], rpy2rotvec[0], rpy2rotvec[1], rpy2rotvec[2]]
  return pose
  end
  def aaa_get_modify_tcp(uuid):
  local arr = AAA.server.getModifyTCP(uuid)
  local pose = p[arr[0], arr[1], arr[2], d2r(arr[3]), d2r(arr[4]), d2r(arr[5])]
  return pose
  end
  def aaa_get_change_tcp(uuid):
  local tcp = AAA.server.getChangeTCP(uuid)
  local rpy2rotvec = rpy2rotvec([d2r(tcp[3]), d2r(tcp[4]), d2r(tcp[5])])
  local pose = p[tcp[0], tcp[1], tcp[2], rpy2rotvec[0], rpy2rotvec[1], rpy2rotvec[2]]
  return pose
  end
  def aaa_get_user_payload(uuid):
  local res = AAA.server.getPayload(uuid)
  return res
  end
  def aaa_get_change_payload(uuid):
  local res = AAA.server.getChangeTcpPayload(uuid)
  return res
  end
  def aaa_get_toolio(uuid):
  local res = AAA.server.getToolIO(uuid)
  return res
  end
  def aaa_get_user_cog(uuid):
  local res = AAA.server.getCog(uuid)
  return res
  end
  def aaa_get_change_cog(uuid):
  local res = AAA.server.getChangeTcpCog(uuid)
  return res
  end
  def aaa_set_user_tcp(uuid):
  local tcp = aaa_get_user_tcp(uuid)
  set_tcp(tcp)
  return tcp
  end
  def aaa_set_change_tcp(uuid):
  local tcp = aaa_get_change_tcp(uuid)
  set_tcp(tcp)
  return tcp
  end
  def aaa_set_change_payload(uuid):
  local payload = aaa_get_change_payload(uuid)
  local cog = aaa_get_change_cog(uuid)
  set_payload(payload, cog)
  textmsg("current_change_cog=", get_target_payload_cog())
  textmsg("current_change_payload=", get_target_payload())
  return [payload, cog[0], cog[1], cog[2]]
  end
  def aaa_set_user_payload(uuid):
  local payload = aaa_get_user_payload(uuid)
  local cog = aaa_get_user_cog(uuid)
  set_payload(payload, cog)
  textmsg("current_user_cog=", get_target_payload_cog())
  textmsg("current_user_payload=", get_target_payload())
  return [payload, cog[0], cog[1], cog[2]]
  end
  def aaa_set_w1payload(uuid):
  local payload = aaa_get_w1_payload(uuid)
  local cog = aaa_get_w1_cog(uuid)
  set_payload(payload, cog)
  return [payload, cog[0], cog[1], cog[2]]
  end
  def aaa_get_voltage(uuid):
  local voltage = AAA.server.getVoltage(uuid)
  return voltage
  end
  def aaa_set_voltage(uuid):
  local volt = AAA.server.getVoltage(uuid)
  set_tool_voltage(volt)
  return volt
  end
  def aaa_to_pose(arr):
  local pose = p[arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]
  return pose
  end
  def aaa_offset_to_pose(arr):
  local pose = p[arr[0], arr[1], arr[2], 0, 0, 0]
  return pose
  end
  def aaa_get_w(number,uuid):
  if (number == 1):
  local holder = AAA.server.getW(2,uuid)
  local holder_pose = aaa_to_pose(holder)
  local offset = AAA.server.getW(number,uuid)
  local offset_pose = aaa_to_pose(offset)
  textmsg("w1_holder_pose=", holder_pose)
  textmsg("w1_offset_pose=", offset_pose)
  local rel = pose_trans(holder_pose, offset_pose)
  textmsg("w1_transpose=", rel)
  return rel
  elif (number == 2):
  local holder = AAA.server.getW(number,uuid)
  local holde_pose = aaa_to_pose(holder)
  return holde_pose
  elif (number == 3):
  local holder = AAA.server.getW(2,uuid)
  local holder_pose = aaa_to_pose(holder)
  local offset = AAA.server.getW(number,uuid)
  local offset_pose = aaa_to_pose(offset)
  textmsg("w3_holder_pose=", holder_pose)
  textmsg("w3_offset_pose=", offset_pose)
  local rel = pose_trans(holder_pose, offset_pose)
  textmsg("w3_transpose=", rel)
  return rel
  elif (number == 4):
  local holder = AAA.server.getW(2,uuid)
  local holder_pose = aaa_to_pose(holder)
  local offset = AAA.server.getW(number,uuid)
  local offset_pose = aaa_to_pose(offset)
  textmsg("w4_holder_pose=", holder_pose)
  textmsg("w4_offset_pose=", offset_pose)
  local rel = pose_trans(holder_pose, offset_pose)
  textmsg("w4_transpose=", rel)
  return rel
  elif (number == 0):
  local enter = AAA.server.getW(number,uuid)
  return aaa_to_pose(enter)
  elif (number == 5):
  local exit = AAA.server.getW(number,uuid)
  return aaa_to_pose(exit)
  else:
  return p[0,0,0,0,0,0]
  end
  end
  def aaa_ping():
  return AAA.server.ping()
  end
  def aaa_get_w1_payload(uuid):
  local payload = AAA.server.getW1Payload(uuid)
  return payload
  end
  def aaa_get_w1_cog(uuid):
  local cog = AAA.server.getW1Cog(uuid)
  return cog
  end
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  rq_gripper_socket_ip_address = "127.0.0.1"
  rq_gripper_socket_port = 63352
  
  rq_comm_check_fail_counter = [0, 0, 0, 0]
  
  rq_read_act = [-1, -1, -1, -1]
  rq_read_gto = [-1, -1, -1, -1]
  rq_read_for = [-1, -1, -1, -1]
  rq_read_spe = [-1, -1, -1, -1]
  rq_read_obj = [-1, -1, -1, -1]
  rq_read_sta = [-1, -1, -1, -1]
  rq_read_flt = [-1, -1, -1, -1]
  rq_read_pos = [-1, -1, -1, -1]
  rq_read_pre = [-1, -1, -1, -1]
  rq_read_lbp = [-1, -1, -1, -1]
  rq_read_lrd = [-1, -1, -1, -1]
  rq_read_lbl = [-1, -1, -1, -1]
  rq_read_lgn = [-1, -1, -1, -1]
  rq_read_msc = [-1, -1, -1, -1]
  rq_read_mod = [-1, -1, -1, -1]
  rq_read_cou = [-1, -1, -1, -1]
  rq_read_ncy = [-1, -1, -1, -1]
  rq_read_dst = [-1, -1, -1, -1]
  rq_read_pco = [-1, -1, -1, -1]
  
  rq_string_initial_value = "N/A"
  
  rq_read_snu_1 = rq_string_initial_value
  rq_read_snu_2 = rq_string_initial_value
  rq_read_snu_3 = rq_string_initial_value
  rq_read_snu_4 = rq_string_initial_value
  
  rq_read_fwv_1 = rq_string_initial_value
  rq_read_fwv_2 = rq_string_initial_value
  rq_read_fwv_3 = rq_string_initial_value
  rq_read_fwv_4 = rq_string_initial_value
  
  rq_read_ver_1 = rq_string_initial_value
  rq_read_ver_2 = rq_string_initial_value
  rq_read_ver_3 = rq_string_initial_value
  rq_read_ver_4 = rq_string_initial_value
  
  rq_read_act_req = [True, True, True, True]
  rq_read_gto_req = [True, True, True, True]
  rq_read_for_req = [True, True, True, True]
  rq_read_spe_req = [True, True, True, True]
  rq_read_obj_req = [True, True, True, True]
  rq_read_sta_req = [True, True, True, True]
  rq_read_flt_req = [True, True, True, True]
  rq_read_pos_req = [True, True, True, True]
  rq_read_pre_req = [True, True, True, True]
  rq_read_lbp_req = [True, True, True, True]
  rq_read_lrd_req = [True, True, True, True]
  rq_read_lbl_req = [True, True, True, True]
  rq_read_lgn_req = [True, True, True, True]
  rq_read_msc_req = [True, True, True, True]
  rq_read_mod_req = [True, True, True, True]
  rq_read_cou_req = [True, True, True, True]
  rq_read_ncy_req = [True, True, True, True]
  rq_read_dst_req = [True, True, True, True]
  rq_read_pco_req = [True, True, True, True]
  
  rq_read_snu_1_req = False
  rq_read_snu_2_req = False
  rq_read_snu_3_req = False
  rq_read_snu_4_req = False
  
  rq_read_fwv_1_req = False
  rq_read_fwv_2_req = False
  rq_read_fwv_3_req = False
  rq_read_fwv_4_req = False
  
  rq_read_ver_1_req = False
  rq_read_ver_2_req = False
  rq_read_ver_3_req = False
  rq_read_ver_4_req = False
  
  rq_write_act_request = [False, False, False, False]
  rq_write_gto_request = [False, False, False, False]
  rq_write_atr_request = [False, False, False, False]
  rq_write_ard_request = [False, False, False, False]
  rq_write_pos_request = [False, False, False, False]
  rq_write_lbp_request = [False, False, False, False]
  rq_write_lrd_request = [False, False, False, False]
  rq_write_lbl_request = [False, False, False, False]
  rq_write_lgn_request = [False, False, False, False]
  rq_write_msc_request = [False, False, False, False]
  rq_write_mod_request = [False, False, False, False]
  
  rq_write_act = [-1, -1, -1, -1]
  rq_write_gto = [-1, -1, -1, -1]
  rq_write_atr = [-1, -1, -1, -1]
  rq_write_ard = [-1, -1, -1, -1]
  rq_write_for = [-1, -1, -1, -1]
  rq_write_spe = [-1, -1, -1, -1]
  rq_write_pos = [-1, -1, -1, -1]
  rq_write_lbp = [-1, -1, -1, -1]
  rq_write_lrd = [-1, -1, -1, -1]
  rq_write_lbl = [-1, -1, -1, -1]
  rq_write_lgn = [-1, -1, -1, -1]
  rq_write_msc = [-1, -1, -1, -1]
  rq_write_mod = [-1, -1, -1, -1]
  
  rq_write_act_previous = rq_write_act
  rq_write_gto_previous = rq_write_gto
  rq_write_atr_previous = rq_write_atr
  rq_write_ard_previous = rq_write_ard
  rq_write_for_previous = rq_write_for
  rq_write_spe_previous = rq_write_spe
  rq_write_pos_previous = rq_write_pos
  rq_write_lbp_previous = rq_write_lbp
  rq_write_lrd_previous = rq_write_lrd
  rq_write_lbl_previous = rq_write_lbl
  rq_write_lgn_previous = rq_write_lgn
  rq_write_msc_previous = rq_write_msc
  rq_write_mod_previous = rq_write_mod
  
  gripper_connected = [False, False, False, False]
  gripper_socket_open = [False, False, False, False]
  rq_comm_clear_socket_buffer_enabled = [True, True, True, True]
  rq_comm_check_counter = 0
  rq_gripper_communication_thread_started = False
  
  thread rq_gripper_communication():
      rq_comm_read_constants()
      rq_comm_read_variables()
      rq_comm_initialize_write_values()
  
      while(True):
          rq_comm_clear_socket_buffer()
          rq_comm_check()
          rq_comm_read_variables()
          rq_comm_write_variables()
  
          rq_gripper_communication_thread_started = True
          sleep(0.008)
      end
  end
  
  def rq_socket_to_index(gripper_socket="1"):
      # Patch in case gripper_socket is an integer
      gripper_socket_string = str_cat("", gripper_socket)
  
      if(gripper_socket_string == "1"):
          return 0
      elif(gripper_socket_string == "2"):
          return 1
      elif(gripper_socket_string == "3"):
          return 2
      elif(gripper_socket_string == "4"):
          return 3
      end
      return 0
  end
  
  def rq_index_to_socket(index=0):
      if(index == 0):
          return "1"
      elif(index == 1):
          return "2"
      elif(index == 2):
          return "3"
      elif(index == 3):
          return "4"
      end
      return "1"
  end
  
  def rq_comm_check():
      index = 0
      rq_comm_check_fail_counter_max = 99999
  
      if(rq_comm_check_counter < 50):
          rq_comm_check_counter = rq_comm_check_counter + 1
      else:
          rq_comm_check_counter = 0
  
          while(index <= 3):
              socket = rq_index_to_socket(index)
  
              if(gripper_connected[index]):
                  # Patch in case gripper_socket is an integer
                  gripper_socket_string = str_cat("", socket)
  
                  sid_list = rq_get_sid(socket)
                  is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
                  if(is_gripper_in_sid_list):
                      rq_comm_check_fail_counter[index] = 0
                  else:
                      rq_comm_check_fail_counter[index] = rq_comm_check_fail_counter[index] + 1
                  end
  
                  if(rq_comm_check_fail_counter[index] > rq_comm_check_fail_counter_max):
                      message = str_cat("Communication lost with Robotiq's Gripper Slave ID ", gripper_socket_string)
                      popup(message, "Communication Error", False, True, True)
                  end
              end
              index = index + 1
          end
      end
  end
  
  def rq_init_comm_if_connected(gripper_sid=9, gripper_socket="1"):
      if(not is_gripper_socket_open(gripper_socket)):
        open_gripper_socket(gripper_socket)
      end
  
      socket_sid_set = rq_set_sid(gripper_sid, gripper_socket)
  
      if(socket_sid_set):
          # Patch in case gripper_socket is an integer
          gripper_socket_string = str_cat("", gripper_socket)
  
          sid_list = rq_get_sid(gripper_socket)
          is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
          if(is_gripper_in_sid_list):
              rq_set_gripper_connected(gripper_socket_string)
              return True
          end
      end
  
      return False
  end
  
  def open_gripper_socket(gripper_socket="1"):
      is_open = socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
      set_gripper_socket_open(gripper_socket, is_open)
  end
  
  def rq_close_gripper_socket(gripper_socket="1"):
      socket_close(gripper_socket)
      set_gripper_socket_open(gripper_socket, False)
      rq_set_gripper_connected(gripper_socket, False)
  end
  
  
  def is_gripper_socket_open(gripper_socket="1"):
      return gripper_socket_open[rq_socket_to_index(gripper_socket)]
  end
  
  def set_gripper_socket_open(gripper_socket, is_open):
      gripper_socket_open[rq_socket_to_index(gripper_socket)] = is_open
  end
  
  def rq_set_gripper_connected(gripper_socket="1", connected = True):
      gripper_connected[rq_socket_to_index(gripper_socket)] = connected
  end
  
  def rq_is_gripper_connected(gripper_id="1"):
      return gripper_connected[rq_socket_to_index(gripper_id)]
  end
  
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
      socket_set_var("SID", gripper_sid,  gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      return is_ack(ack)
  end
  
  def rq_get_sid(gripper_socket="1"):
      socket_send_string("GET SID", gripper_socket)
      sid_list = socket_read_byte_list(17, gripper_socket)
      return sid_list
  end
  
  def rq_wait_for_gripper_connected():
      gripper_socket = "gripper_conn_socket"
      socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
  
      remainingRetries = 2000
      sid_list = rq_get_sid(gripper_socket)
      gripper_is_connected = rq_is_any_gripper_connected(sid_list)
  
      while(not gripper_is_connected and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          sid_list = rq_get_sid(gripper_socket)
          gripper_is_connected = rq_is_any_gripper_connected(sid_list)
      end
  
      socket_close(gripper_socket)
  end
  
  def rq_is_any_gripper_connected(sid_list):
      is_gripper_1_connected = rq_is_gripper1_in_sid_list(sid_list)
      is_gripper_2_connected = rq_is_gripper2_in_sid_list(sid_list)
      is_gripper_3_connected = rq_is_gripper3_in_sid_list(sid_list)
      is_gripper_4_connected = rq_is_gripper4_in_sid_list(sid_list)
  
      return is_gripper_1_connected or is_gripper_2_connected or is_gripper_3_connected or is_gripper_4_connected
  end
  
  def rq_is_gripper_ascii_in_sid_list(gripper_ascii_sid, sid_list):
      sid_list_length = sid_list[0]
      sid_list_empty_length = 2
  
      if (sid_list_length <= sid_list_empty_length):
          return False
      end
  
      sid1 = sid_list[2]
      sid2 = sid_list[5]
      sid3 = sid_list[8]
      sid4 = sid_list[11]
  
      return sid1 == gripper_ascii_sid or sid2 == gripper_ascii_sid or sid3 == gripper_ascii_sid or sid4 == gripper_ascii_sid
  end
  
  def rq_is_gripper_in_sid_list(gripper_socket_string, sid_list):
      if(gripper_socket_string == "1"):
          return rq_is_gripper1_in_sid_list(sid_list)
      elif(gripper_socket_string == "2"):
          return rq_is_gripper2_in_sid_list(sid_list)
      elif(gripper_socket_string == "3"):
          return rq_is_gripper3_in_sid_list(sid_list)
      elif(gripper_socket_string == "4"):
          return rq_is_gripper4_in_sid_list(sid_list)
      end
      return False
  end
  
  def rq_is_gripper1_in_sid_list(sid_list):
      gripper_1_sid_ascii = 57
      return rq_is_gripper_ascii_in_sid_list(gripper_1_sid_ascii, sid_list)
  end
  
  def rq_is_gripper2_in_sid_list(sid_list):
      gripper_2_sid_ascii = 50
      return rq_is_gripper_ascii_in_sid_list(gripper_2_sid_ascii, sid_list)
  end
  
  def rq_is_gripper3_in_sid_list(sid_list):
      gripper_3_sid_ascii = 51
      return rq_is_gripper_ascii_in_sid_list(gripper_3_sid_ascii, sid_list)
  end
  
  def rq_is_gripper4_in_sid_list(sid_list):
      gripper_4_sid_ascii = 52
      return rq_is_gripper_ascii_in_sid_list(gripper_4_sid_ascii, sid_list)
  end
  
  def rq_comm_clear_socket_buffer():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index] and rq_comm_clear_socket_buffer_enabled[index]):
              byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              while(byte_in_buffer[0] >= 1):
                  byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              end
              rq_comm_clear_socket_buffer_enabled[index] = False
          end
          index = index + 1
      end
  end
  
  def rq_comm_initialize_write_values():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act[index] = rq_read_act[index]
                  rq_write_act_previous[index] = rq_read_act[index]
              elif(rq_write_act_previous[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act_previous[index] = rq_read_act[index]
              end
  
              if(rq_write_gto[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto[index] = rq_read_gto[index]
                  rq_write_gto_previous[index] = rq_read_gto[index]
              elif(rq_write_gto_previous[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto_previous[index] = rq_read_gto[index]
              end
  
              if(rq_write_for[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for[index] = rq_read_for[index]
                  rq_write_for_previous[index] = rq_read_for[index]
              elif(rq_write_for_previous[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for_previous[index] = rq_read_for[index]
              end
  
              if(rq_write_spe[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe[index] = rq_read_spe[index]
                  rq_write_spe_previous[index] = rq_read_spe[index]
              elif(rq_write_spe_previous[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe_previous[index] = rq_read_spe[index]
              end
  
              if(rq_write_pos[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos[index] = rq_read_pos[index]
                  rq_write_pos_previous[index] = rq_read_pos[index]
              elif(rq_write_pos_previous[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos_previous[index] = rq_read_pos[index]
              end
  
              if(rq_write_lbp[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp[index] = rq_read_lbp[index]
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              elif(rq_write_lbp_previous[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              end
  
              if(rq_write_lrd[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd[index] = rq_read_lrd[index]
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              elif(rq_write_lrd_previous[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              end
  
              if(rq_write_lbl[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl[index] = rq_read_lbl[index]
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              elif(rq_write_lbl_previous[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              end
  
              if(rq_write_lgn[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn[index] = rq_read_lgn[index]
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              elif(rq_write_lgn_previous[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              end
  
              if(rq_write_msc[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc[index] = rq_read_msc[index]
                  rq_write_msc_previous[index] = rq_read_msc[index]
              elif(rq_write_msc_previous[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc_previous[index] = rq_read_msc[index]
              end
  
              if(rq_write_mod[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod[index] = rq_read_mod[index]
                  rq_write_mod_previous[index] = rq_read_mod[index]
              elif(rq_write_mod_previous[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod_previous[index] = rq_read_mod[index]
              end
  
          end
          index = index + 1
      end
  end
  
  def rq_comm_set_var(var, value=0, gripper_socket="1"):
      socket_set_var(var, value, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_set_pos_spe_for(pos=0, speed=0, force=0, gripper_socket="1"):
      socket_send_string("SET POS", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(pos, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("SPE", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(speed, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("FOR", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(force, gripper_socket)
      socket_send_byte(10, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_read_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_read_act_req[index]):
                  rq_read_act[index] = socket_get_var("ACT", socket)
                  rq_read_act_req[index] = False
              end
  
              if(rq_read_gto_req[index]):
                  rq_read_gto[index] = socket_get_var("GTO", socket)
                  rq_read_gto_req[index] = False
              end
  
              if(rq_read_pre_req[index]):
                  rq_read_pre[index] = socket_get_var("PRE", socket)
                  rq_read_pre_req[index] = False
              end
  
              if(rq_read_pos_req[index]):
                  rq_read_pos[index] = socket_get_var("POS", socket)
                  rq_read_pos_req[index] = False
              end
  
              if(rq_read_spe_req[index]):
                  rq_read_spe[index] = socket_get_var("SPE", socket)
                  rq_read_spe_req[index] = False
              end
  
              if(rq_read_for_req[index]):
                  rq_read_for[index] = socket_get_var("FOR", socket)
                  rq_read_for_req[index] = False
              end
  
              if(rq_read_obj_req[index]):
                  rq_read_obj[index] = socket_get_var("OBJ", socket)
                  rq_read_obj_req[index] = False
              end
  
              if(rq_read_sta_req[index]):
                  rq_read_sta[index] = socket_get_var("STA", socket)
                  rq_read_sta_req[index] = False
              end
  
              if(rq_read_mod_req[index]):
                  rq_read_mod[index] = socket_get_var("MOD", socket)
                  rq_read_mod_req[index] = False
              end
  
              if(rq_read_flt_req[index]):
                  rq_read_flt[index] = socket_get_var("FLT",socket)
                  rq_read_flt_req[index] = False
              end
  
              if(rq_read_lbp_req[index]):
                  rq_read_lbp[index] = socket_get_var("LBP", socket)
                  rq_read_lbp_req[index] = False
              end
  
              if(rq_read_lrd_req[index]):
                  rq_read_lrd[index] = socket_get_var("LRD", socket)
                  rq_read_lrd_req[index] = False
              end
  
              if(rq_read_lbl_req[index]):
                  rq_read_lbl[index] = socket_get_var("LBL",socket)
                  rq_read_lbl_req[index] = False
              end
  
              if(rq_read_lgn_req[index]):
                  rq_read_lgn[index] = socket_get_var("LGN", socket)
                  rq_read_lgn_req[index] = False
              end
  
              if(rq_read_msc_req[index]):
                  rq_read_msc[index] = socket_get_var("MSC", socket)
                  rq_read_msc_req[index] = False
              end
  
              if(rq_read_cou_req[index]):
                  rq_read_cou[index] = socket_get_var("COU", socket)
                  rq_read_cou_req[index] = False
              end
  
              if(rq_read_ncy_req[index]):
                  rq_read_ncy[index] = socket_get_var("NCY", socket)
                  rq_read_ncy_req[index] = False
              end
  
              if(rq_read_dst_req[index]):
                  rq_read_dst[index] = socket_get_var("DST", socket)
                  rq_read_dst_req[index] = False
              end
  
              if(rq_read_pco_req[index]):
                  rq_read_pco[index] = socket_get_var("PCO", socket)
                  rq_read_pco_req[index] = False
              end
          end
          index = index + 1
      end
  end
  
  def rq_comm_read_constants():
  
      if(gripper_connected[0]):
          while(rq_read_snu_1 == rq_string_initial_value):
              socket_send_string("GET SNU", "1")
              rq_read_snu_1 = socket_read_string("1")
          end
  
          while(rq_read_fwv_1 == rq_string_initial_value):
              socket_send_string("GET FWV", "1")
              rq_read_fwv_1 = socket_read_string("1")
          end
  
          while(rq_read_ver_1 == rq_string_initial_value):
              socket_send_string("GET VER", "1")
              rq_read_ver_1 = socket_read_string("1")
          end
      end
  
      if(gripper_connected[1]):
          while(rq_read_snu_2 == rq_string_initial_value):
              socket_send_string("GET SNU", "2")
              rq_read_snu_2 = socket_read_string("2")
          end
  
          while(rq_read_fwv_2 == rq_string_initial_value):
              socket_send_string("GET FWV", "2")
              rq_read_fwv_2 = socket_read_string("2")
          end
  
          while(rq_read_ver_2 == rq_string_initial_value):
              socket_send_string("GET VER", "2")
              rq_read_ver_2 = socket_read_string("2")
          end
      end
  
      if(gripper_connected[2]):
          while(rq_read_snu_3 == rq_string_initial_value):
              socket_send_string("GET SNU", "3")
              rq_read_snu_3 = socket_read_string("3")
          end
  
          while(rq_read_fwv_3 == rq_string_initial_value):
              socket_send_string("GET FWV", "3")
              rq_read_fwv_3 = socket_read_string("3")
          end
  
          while(rq_read_ver_3 == rq_string_initial_value):
              socket_send_string("GET VER", "3")
              rq_read_ver_3 = socket_read_string("3")
          end
      end
  
      if(gripper_connected[3]):
          while(rq_read_snu_4 == rq_string_initial_value):
              socket_send_string("GET SNU", "4")
              rq_read_snu_4 = socket_read_string("4")
          end
  
          while(rq_read_fwv_4 == rq_string_initial_value):
              socket_send_string("GET FWV", "4")
              rq_read_fwv_4 = socket_read_string("4")
          end
  
          while(rq_read_ver_4 == rq_string_initial_value):
              socket_send_string("GET VER", "4")
              rq_read_ver_4 = socket_read_string("4")
          end
      end
  end
  
  def rq_comm_write_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act_request[index]):
                  if(is_ack(rq_comm_set_var("ACT", rq_write_act[index], socket))):
                      rq_write_act_previous[index] = rq_write_act[index]
                      rq_write_act_request[index] = False
                  end
              end
  
              if(rq_write_gto_request[index]):
                  if(is_ack(rq_comm_set_var("GTO", rq_write_gto[index], socket))):
                      rq_write_gto_previous[index] = rq_write_gto[index]
                      rq_write_gto_request[index] = False
                  end
              end
  
              if(rq_write_atr_request[index]):
                  if(is_ack(rq_comm_set_var("ATR", rq_write_atr[index], socket))):
                      rq_write_atr_previous[index] = rq_write_atr[index]
                      rq_write_atr_request[index] = False
                  end
              end
  
              if(rq_write_ard_request[index]):
                  if(is_ack(rq_comm_set_var("ARD", rq_write_ard[index], socket))):
                      rq_write_ard_previous[index] = rq_write_ard[index]
                      rq_write_ard_request[index] = False
                  end
              end
  
              if(rq_write_pos_request[index]):
                  if(is_ack(rq_comm_set_pos_spe_for(rq_write_pos[index], rq_write_spe[index], rq_write_for[index], socket))):
                      rq_write_pos_previous[index] = rq_write_pos[index]
                      rq_write_spe_previous[index] = rq_write_spe[index]
                      rq_write_for_previous[index] = rq_write_for[index]
                      rq_write_pos_request[index] = False
                  end
              end
  
              if(rq_write_lbp_request[index]):
                  if(is_ack(rq_comm_set_var("LBP", rq_write_lbp[index], socket))):
                      rq_write_lbp_previous[index] = rq_write_lbp[index]
                      rq_write_lbp_request[index] = False
                  end
              end
  
              if(rq_write_lrd_request[index]):
                  if(is_ack(rq_comm_set_var("LRD", rq_write_lrd[index], socket))):
                      rq_write_lrd_previous[index] = rq_write_lrd[index]
                      rq_write_lrd_request[index] = False
                  end
              end
  
              if(rq_write_lbl_request[index]):
                  if(is_ack(rq_comm_set_var("LBL", rq_write_lbl[index], socket))):
                      rq_write_lbl_previous[index] = rq_write_lbl[index]
                      rq_write_lbl_request[index] = False
                  end
              end
  
              if(rq_write_lgn_request[index]):
                  if(is_ack(rq_comm_set_var("LGN", rq_write_lgn[index], socket))):
                      rq_write_lgn_previous[index] = rq_write_lgn[index]
                      rq_write_lgn_request[index] = False
                  end
              end
  
              if(rq_write_msc_request[index]):
                  if(is_ack(rq_comm_set_var("MSC", rq_write_msc[index], socket))):
                      rq_write_msc_previous[index] = rq_write_msc[index]
                      rq_write_msc_request[index] = False
                  end
              end
  
              if(rq_write_mod_request[index]):
                  if(is_ack(rq_comm_set_var("MOD", rq_write_mod[index], socket))):
                      rq_write_mod_previous[index] = rq_write_mod[index]
                      rq_write_mod_request[index] = False
                  end
              end
          end
          index = index + 1
      end
  end
  
  def rq_activate(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_reset(gripper_socket)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
              rq_reset(gripper_socket)
              sleep(0.008)
          end
  
          rq_set_var("ACT",1, gripper_socket)
      end
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_activate(gripper_socket)
          sleep(1.0)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 1 or not rq_get_var("STA", 1, gripper_socket) == 3):
              sleep(0.1)
          end
  
          sleep(0.5)
      end
  end
  
  def rq_activate_all_grippers(reset=False):
      if(gripper_connected[0]):
          rq_reset_and_activate("1", reset)
      end
  
      if(gripper_connected[1]):
          rq_reset_and_activate("2", reset)
      end
  
      if(gripper_connected[2]):
          rq_reset_and_activate("3", reset)
      end
  
      if(gripper_connected[3]):
          rq_reset_and_activate("4", reset)
      end
  end
  
  def rq_reset_and_activate(gripper_socket="1", reset=False):
      if(reset):
          rq_reset(gripper_socket)
          rq_activate_and_wait(gripper_socket)
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_activate_and_wait(gripper_socket)
      end
  end
  
  def rq_reset(gripper_socket="1"):
      rq_set_var("ACT", 0, gripper_socket)
      rq_set_var("ATR", 0, gripper_socket)
  
      while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
          rq_set_var("ACT", 0, gripper_socket)
          rq_set_var("ATR", 0, gripper_socket)
          sleep(0.008)
      end
  
      sleep(0.5)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",0, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",1, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_wait_autorelease_completed(gripper_socket="1"):
      remainingRetries = 20
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_in_progress(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  
      remainingRetries = 100
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_completed(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  end
  
  def rq_set_force(force, gripper_socket="1"):
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
      rq_set_var("FOR", force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="1"):
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      rq_set_var("SPE", speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="1"):
      rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="1"):
      rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
      rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="1"):
      rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="1"):
      rq_set_pos(pos, gripper_socket)
      rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="1"):
      rq_move(pos, gripper_socket)
  
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
      end
  end
  
  def rq_wait_for_pos_request(pos, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_var("POS", pos, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_pos_spe_for_request(pos, speed, force, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_for_pos(pos, gripper_socket="1"):
      rq_wait_for_pos_request(pos, gripper_socket)
  
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait(gripper_socket="1"):
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          sleep(0.008)
          # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
          # the communication driver reset the GTO bit
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait_for_object_detected(gripper_socket="1"):
      # Wait the object detection
      while (not rq_is_object_detected(gripper_socket)):
          sleep(0.008)
      end
  end
  
  # set the position
  def rq_set_pos(pos, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      rq_set_var("POS", pos, gripper_socket)
      rq_wait_for_pos_request(pos, gripper_socket)
  end
  
  def rq_set_pos_spd_for(pos, speed, force, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
  
      rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
  end
  
  def rq_set_gripper_max_current_mA(current_mA, gripper_socket="1"):
      current = floor(current_mA / 10)
  
      rq_set_var("MSC", current, gripper_socket)
      current_read = rq_get_var("MSC", 1, gripper_socket)
  
      while(current_read != current):
          rq_set_var("MSC", current, gripper_socket)
          current_read = rq_get_var("MSC", 1, gripper_socket)
      end
  end
  
  def rq_set_gripper_mode(mode, gripper_socket="1"):
      rq_set_var("MOD", mode, gripper_socket)
  end
  
  def rq_set_gripper_max_cur(current_mA, gripper_socket="1"):
      rq_set_gripper_max_current_mA(current_mA, gripper_socket)
  end
  
  def rq_get_gripper_max_current_mA(gripper_socket="1"):
      current = rq_get_var("MSC", 1, gripper_socket)
  
      if(current == -1):
          current_mA = current
      else:
          current_mA = current * 10
      end
  
      return current_mA
  end
  
  def rq_get_gripper_max_cur(gripper_socket="1"):
      return rq_get_gripper_max_current_mA(gripper_socket)
  end
  
  def rq_set_max_current_for_all_grippers():
      current_mA = rq_get_max_current_mA()
  
      if(gripper_connected[0]):
          rq_set_gripper_max_current_mA(current_mA, "1")
      end
  
      if(gripper_connected[1]):
          rq_set_gripper_max_current_mA(current_mA, "2")
      end
  
      if(gripper_connected[2]):
          rq_set_gripper_max_current_mA(current_mA, "3")
      end
  
      if(gripper_connected[3]):
          rq_set_gripper_max_current_mA(current_mA, "4")
      end
  end
  
  def rq_get_max_current_mA():
      max_current_mA = 0
  
      if(rq_current_limit_enabled):
          nb_connected_grippers = rq_get_nb_connected_grippers()
  
          if(nb_connected_grippers == 1):
              max_current_mA = 600
          elif(nb_connected_grippers > 1):
              max_current_mA = 450
          end
      else:
  
      end
  
      return max_current_mA
  end
  
  def rq_get_nb_connected_grippers():
      nb_connected_grippers = 0
  
      if(gripper_connected[0]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[1]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[2]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[3]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      return nb_connected_grippers
  end
  
  def rq_list_of_bytes_to_value(list_of_bytes):
      value = -1
  
      # response list length
      if (list_of_bytes[0] == 1):
          value = list_of_bytes[1] - 48
      elif (list_of_bytes[0] == 2):
          value = (list_of_bytes[1] - 48) * 10 + (list_of_bytes[2] - 48)
      elif (list_of_bytes[0] == 3):
          value = (list_of_bytes[1] - 48) * 100 + (list_of_bytes[2] - 48) * 10 + (list_of_bytes[3] - 48)
      end
  
      return value
  end
  
  def rq_is_motion_complete(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_gripper_at_position(gOBJ) or is_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_gripper_activated(gripper_socket="1"):
      gSTA = rq_get_var("STA", 1, gripper_socket)
      sleep(0.008)
      return is_STA_gripper_activated(gSTA)
  end
  
  def rq_is_object_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_object_detected(gOBJ)
  end
  
  def rq_current_pos(gripper_socket="1"):
      gPOS = rq_get_var("POS", 1, gripper_socket)
      sleep(0.008)
      return gPOS
  end
  
  def rq_motor_current(gripper_socket="1"):
      rq_current = rq_get_var("COU", 1, gripper_socket)
      sleep(0.008)
      return rq_current * 10
  end
  
  def rq_print_connected_grippers():
      if(gripper_connected[0]):
          textmsg("Gripper 1 : ", "connected and socket open.")
      end
  
      if (gripper_connected[1]):
          textmsg("Gripper 2 : ", "connected and socket open.")
      end
  
      if (gripper_connected[2]):
          textmsg("Gripper 3 : ", "connected and socket open.")
      end
  
      if (gripper_connected[3]):
          textmsg("Gripper 4 : ", "connected and socket open.")
      end
  end
  
  def rq_print_gripper_fault_code(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(is_FLT_no_fault(gFLT)):
          textmsg("Gripper Fault : ", "No Fault (0x00)")
      elif (is_FLT_action_delayed(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to performing the action (0x05)")
      elif (is_FLT_not_activated(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: The activation bit must be set prior to performing the action (0x07)")
      elif (is_FLT_over_temperature(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Maximum operating temperature exceeded (≥ 85°C internally), let cool down (below 80°C) (0x08)")
      elif (is_FLT_no_communication(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: No communication during at least 1 second (0x09)")
      elif (is_FLT_under_voltage(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Under minimum operating voltage (0x0A)")
      elif (is_FLT_autorelease_in_progress(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release in progress (0x0B)")
      elif (is_FLT_internal_fault(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Internal fault; contact support@robotiq.com (0x0C)")
      elif (is_FLT_activation_error(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Activation fault; verify that no interference or other error occurred (0x0D)")
      elif (is_FLT_overcurrent(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Overcurrent triggered (0x0E)")
      elif (is_FLT_autorelease_completed(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
      else:
          textmsg("Gripper Fault : ", "Unknown Fault")
      end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="1"):
      num_cycles = rq_get_var("NCY", 1, gripper_socket)
  
      if(num_cycles == -1):
          textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
      else:
          textmsg("Gripper Cycle Number : ", num_cycles)
      end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="1"):
      driver_state = rq_get_var("DST", 1, gripper_socket)
  
      if(driver_state == 0):
          textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
      elif(driver_state == 1):
          textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
      elif(driver_state == 2):
          textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
      elif(driver_state == 3):
          textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
      else:
          textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
      end
  end
  
  def rq_print_gripper_serial_number(gripper_socket="1"):
      serial_number = rq_get_var_string("SNU", 1, gripper_socket)
      textmsg("Gripper Serial Number : ", serial_number)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="1"):
      firmware_version = rq_get_var_string("FWV", 1, gripper_socket)
      textmsg("Gripper Firmware Version : ", firmware_version)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="1"):
      driver_version = rq_get_var_string("VER", 1, gripper_socket)
      textmsg("Gripper Driver Version : ", driver_version)
  end
  
  def rq_print_gripper_connection_state(gripper_socket="1"):
      connection_state = rq_get_var("PCO", 1, gripper_socket)
  
      if (connection_state == 0):
          textmsg("Gripper Connection State : ", "No connection problem detected")
      else:
          textmsg("Gripper Connection State : ", "Connection problem detected")
      end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
      # list length is not 3
      if (list_of_bytes[0] != 3):
          return False
      end
  
      # first byte not is 'a'?
      if (list_of_bytes[1] != 97):
          return False
      end
  
      # first byte not is 'c'?
      if (list_of_bytes[2] != 99):
          return False
      end
  
      # first byte not is 'k'?
      if (list_of_bytes[3] != 107):
          return False
      end
  
      return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
      if (is_ack(list_of_bytes)):
          return False
      else:
          return True
      end
  end
  
  def is_STA_gripper_activated (gSTA):
      if (gSTA == 3):
          return True
      end
  
      return False
  end
  
  def is_OBJ_object_detected (gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_OBJ_gripper_at_position (gOBJ):
      if (gOBJ == 3):
          return True
      end
  
      return False
  end
  
  def is_not_OBJ_gripper_at_position (gOBJ):
      if (is_OBJ_gripper_at_position(gOBJ)):
          return False
      else:
          return True
      end
  end
  
  #### GTO Section ####
  def rq_stop(gripper_socket="1"):
      rq_set_var("GTO", 0, gripper_socket)
  end
  
  def rq_set_GTO_and_wait(value, gripper_socket="1"):
      rq_set_var("GTO" ,value, gripper_socket)
      while(not is_GTO(value, rq_get_var("GTO", 1, gripper_socket))):
        sleep(0.008)
      end
  end
  
  def rq_go_to(gripper_socket="1"):
      rq_set_var("GTO", 1, gripper_socket)
  end
  
  
  def is_GTO(goto_value, rGTO):
      return rGTO == goto_value
  end
  #### GTO Section ####
  
  def is_FLT_no_fault(gFLT):
      return gFLT == 0
  end
  
  def is_FLT_warning(gFLT):
      return gFLT >= 1 and gFLT <= 7
  end
  
  def is_FLT_faulted(gFLT):
      return gFLT >= 8
  end
  
  def is_FLT_action_delayed(gFLT):
      return gFLT == 5
  end
  
  def is_FLT_not_activated(gFLT):
      return gFLT == 7
  end
  
  def is_FLT_over_temperature(gFLT):
      return gFLT == 8
  end
  
  def is_FLT_no_communication(gFLT):
      return gFLT == 9
  end
  
  def is_FLT_under_voltage(gFLT):
      return gFLT == 10
  end
  
  def is_FLT_autorelease_in_progress(gFLT):
      return gFLT == 11
  end
  
  def is_FLT_internal_fault(gFLT):
      return gFLT == 12
  end
  
  def is_FLT_activation_error(gFLT):
      return gFLT == 13
  end
  
  def is_FLT_overcurrent(gFLT):
      return gFLT == 14
  end
  
  def is_FLT_autorelease_completed(gFLT):
      return gFLT == 15
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      if (var_name == "ACT"):
          rq_write_act[index] = var_value
          rq_write_act_request[index] = True
      elif (var_name == "GTO"):
          rq_write_gto[index] = var_value
          rq_write_gto_request[index] = True
      elif (var_name == "ATR"):
          rq_write_atr[index] = var_value
          rq_write_atr_request[index] = True
      elif (var_name == "ARD"):
          rq_write_ard[index] = var_value
          rq_write_ard_request[index] = True
      elif (var_name == "FOR"):
          rq_write_for[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "SPE"):
          rq_write_spe[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "POS"):
          rq_write_pos[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "LBP"):
          rq_write_lbp[index] = var_value
          rq_write_lbp_request[index] = True
      elif (var_name == "LRD"):
          rq_write_lrd[index] = var_value
          rq_write_lrd_request[index] = True
      elif (var_name == "LBL"):
          rq_write_lbl[index] = var_value
          rq_write_lbl_request[index] = True
      elif (var_name == "LGN"):
          rq_write_lgn[index] = var_value
          rq_write_lgn_request[index] = True
      elif (var_name == "MSC"):
          rq_write_msc[index] = var_value
          rq_write_msc_request[index] = True
      elif (var_name == "MOD"):
          rq_write_mod[index] = var_value
          rq_write_mod_request[index] = True
      end
  
      exit_critical
  
      if (var_name == "ACT"):
          while(rq_write_act_request[index]):
              sleep(0.008)
          end
      elif (var_name == "GTO"):
          while(rq_write_gto_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ATR"):
          while(rq_write_atr_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ARD"):
          while(rq_write_ard_request[index]):
              sleep(0.008)
          end
      elif (var_name == "FOR"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "SPE"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "POS"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBP"):
          while(rq_write_lbp_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LRD"):
          while(rq_write_lrd_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBL"):
          while(rq_write_lbl_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LGN"):
          while(rq_write_lgn_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MSC"):
          while(rq_write_msc_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MOD"):
          while(rq_write_mod_request[index]):
              sleep(0.008)
          end
      end
  end
  
  def rq_set_pos_spe_for_var(pos, speed, force, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      rq_write_for[index] = force
      rq_write_spe[index] = speed
      rq_write_pos[index] = pos
      rq_write_pos_request[index] = True
  
      exit_critical
  end
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = -1
  
      if (var_name == "ACT"):
          enter_critical
          rq_read_act_req[index] = True
          exit_critical
          while(rq_read_act_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_act[index]
  
      elif (var_name == "GTO"):
          enter_critical
          rq_read_gto_req[index] = True
          exit_critical
          while(rq_read_gto_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_gto[index]
  
      elif (var_name == "FOR"):
          enter_critical
          rq_read_for_req[index] = True
          exit_critical
          while(rq_read_for_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_for[index]
  
      elif (var_name == "SPE"):
          enter_critical
          rq_read_spe_req[index] = True
          exit_critical
          while(rq_read_spe_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_spe[index]
  
      elif (var_name == "OBJ"):
          enter_critical
          rq_read_obj_req[index] = True
          exit_critical
          while(rq_read_obj_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_obj[index]
  
      elif (var_name == "STA"):
          enter_critical
          rq_read_sta_req[index] = True
          exit_critical
          while(rq_read_sta_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_sta[index]
  
      elif (var_name == "FLT"):
          enter_critical
          rq_read_flt_req[index] = True
          exit_critical
          while(rq_read_flt_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_flt[index]
  
      elif (var_name == "POS"):
          enter_critical
          rq_read_pos_req[index] = True
          exit_critical
          while(rq_read_pos_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pos[index]
  
      elif (var_name == "PRE"):
          enter_critical
          rq_read_pre_req[index] = True
          exit_critical
          while(rq_read_pre_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pre[index]
  
      elif (var_name == "LBP"):
          enter_critical
          rq_read_lbp_req[index] = True
          exit_critical
          while(rq_read_lbp_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbp[index]
  
      elif (var_name == "LRD"):
          enter_critical
          rq_read_lrd_req[index] = True
          exit_critical
          while(rq_read_lrd_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lrd[index]
  
      elif (var_name == "LBL"):
          enter_critical
          rq_read_lbl_req[index] = True
          exit_critical
          while(rq_read_lbl_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbl[index]
  
      elif (var_name == "LGN"):
          enter_critical
          rq_read_lgn_req[index] = True
          exit_critical
          while(rq_read_lgn_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lgn[index]
  
      elif (var_name == "MSC"):
          enter_critical
          rq_read_msc_req[index] = True
          exit_critical
          while(rq_read_msc_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_msc[index]
  
      elif (var_name == "MOD"):
          enter_critical
          rq_read_mod_req[index] = True
          exit_critical
          while(rq_read_mod_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_mod[index]
  
      elif (var_name == "NCY"):
          enter_critical
          rq_read_ncy_req[index] = True
          exit_critical
          while(rq_read_ncy_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_ncy[index]
  
      elif (var_name == "PCO"):
          enter_critical
          rq_read_pco_req[index] = True
          exit_critical
          while(rq_read_pco_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pco[index]
  
      elif (var_name == "DST"):
          enter_critical
          rq_read_dst_req[index] = True
          exit_critical
          while(rq_read_dst_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_dst[index]
  
      end
  
      return var_value
  end
  
  def rq_get_var_string(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = ""
  
      enter_critical
  
      if (var_name == "SNU"):
          if(gripper_socket == "1"):
              var_value = rq_read_snu_1
          elif(gripper_socket == "2"):
              var_value = rq_read_snu_2
          elif(gripper_socket == "3"):
              var_value = rq_read_snu_3
          elif(gripper_socket == "4"):
              var_value = rq_read_snu_4
          end
      elif (var_name == "FWV"):
          if(gripper_socket == "1"):
              var_value = rq_read_fwv_1
          elif(gripper_socket == "2"):
              var_value = rq_read_fwv_2
          elif(gripper_socket == "3"):
              var_value = rq_read_fwv_3
          elif(gripper_socket == "4"):
              var_value = rq_read_fwv_4
          end
      elif (var_name == "VER"):
          if(gripper_socket == "1"):
              var_value = rq_read_ver_1
          elif(gripper_socket == "2"):
              var_value = rq_read_ver_2
          elif(gripper_socket == "3"):
              var_value = rq_read_ver_3
          elif(gripper_socket == "4"):
              var_value = rq_read_ver_4
          end
      end
  
      exit_critical
  
      return var_value
  end
  
  def rq_is_object_validated(gripper_selected, gripper_socket="1"):
      if(gripper_selected):
          if(rq_is_object_detected(gripper_socket)):
              return True
          else:
              return False
          end
      else:
          return True
      end
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  
  def rq_gripper_led_on(gripper_socket="1"):
      rq_set_var("LBP",0, gripper_socket)
  end
  
  def rq_gripper_led_off(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_red(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_blue(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_green(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",1, gripper_socket)
  end
  
  def rq_gripper_led_force_purple(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  ############################################
  # mm/inches functions
  ############################################
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  
  def rq_current_pos_mm(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      return round_value_2_dec(pos_mm)
  end
  
  def rq_current_pos_inches(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      pos_in = pos_mm / 25.4
      return round_value_2_dec(pos_in)
  end
  
  def rq_move_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_move_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_mm(pos_mm, gripper_socket)
  end
  
  def rq_move_and_wait_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_and_wait_mm(pos_mm, gripper_socket)
  end
  
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[gripper_socket - 1]
  end
  
  def get_open_norm(gripper_socket):
      return gripper_open_norm[gripper_socket - 1]
  end
  
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[gripper_socket - 1]
  end
  
  def get_open_mm(gripper_socket):
      return gripper_open_mm[gripper_socket - 1]
  end
  
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[gripper_socket - 1] = closed_norm
  end
  
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[gripper_socket - 1] = open_norm
  end
  
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[gripper_socket - 1] = closed_mm
  end
  
  def set_open_mm(open_mm, gripper_socket):
      gripper_open_mm[gripper_socket - 1] = open_mm
  end
  
  def gripper_to_mm(value_gripper, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      value_norm = (value_gripper / 255) * 100
  
      slope = (closed_mm - open_mm) / (closed_norm - open_norm)
      value_mm = slope * (value_norm - closed_norm) + closed_mm
  
      if (value_mm > open_mm):
          value_mm_limited = open_mm
      elif (value_mm < closed_mm):
          value_mm_limited = closed_mm
      else:
          value_mm_limited = value_mm
      end
  
      return value_mm_limited
  end
  
  def mm_to_gripper(value_mm, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      slope = (closed_norm - open_norm) / (closed_mm - open_mm)
      value_norm = (value_mm - closed_mm) * slope + closed_norm
  
      value_gripper = value_norm * 255 / 100
  
      if (value_gripper > 255):
          value_gripper_limited = 255
      elif (value_gripper < 0):
          value_gripper_limited = 0
      else:
          value_gripper_limited = round_value(value_gripper)
      end
  
      return value_gripper_limited
  end
  
  def round_value(value):
      value_mod = value % 1
  
      if(value_mod < 0.5):
          return floor(value)
      else:
          return ceil(value)
      end
  end
  
  def round_value_2_dec(value):
      value_x_100 = value * 100
      value_x_100_rounded = round_value(value_x_100)
      return value_x_100_rounded / 100
  end
  
  def clear_socket_buffer(gripper_socket="1", read_timeout = 0.1):
      rq_comm_clear_socket_buffer_enabled[rq_socket_to_index(gripper_socket)] = True
  end
  
  def rq_gripper_id_to_ascii(gripper_id):
      if(gripper_id == "1"):
          return 57
      elif(gripper_id == "2"):
          return 50
      elif(gripper_id == "3"):
          return 51
      elif(gripper_id == "4"):
          return 52
      end
  end
  
  def scale(value, rawRange, scaledRange):
      def computeSlope(inputRange, outputRange):
          outputRangeDelta = outputRange[1] - outputRange[0]
          inputRangeDelta = inputRange[1] - inputRange[0]
  
          if (inputRangeDelta == 0):
              return 0
          else:
              return outputRangeDelta / inputRangeDelta
          end
      end
  
      def computeIntercept(slope, inputRange, outputRange):
          return outputRange[0] - (slope * inputRange[0])
      end
  
      def clipScaledValue(outputScaledValue, outputRange):
          if (outputRange[0] < outputRange[1]):
              return clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange)
          else:
              return clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange)
          end
      end
  
      def clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[1]):
              return outputRange[1]
          elif (outputScaledValue > outputRange[0]):
              return outputRange[0]
          else:
              return outputScaledValue
          end
      end
  
      def clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[0]):
              return outputRange[0]
          elif (outputScaledValue > outputRange[1]):
              return outputRange[1]
          else:
              return outputScaledValue
          end
      end
  
      slope = computeSlope(rawRange, scaledRange)
      intercept = computeIntercept(slope, rawRange, scaledRange)
      scaledValue = slope * value + intercept
      return clipScaledValue(scaledValue, scaledRange)
  end
  
  def limit(value, range):
      return scale(value, range, range)
  end
  
  
  rq_init_comm_if_connected(9, "1")
  rq_init_comm_if_connected(2, "2")
  rq_init_comm_if_connected(3, "3")
  rq_init_comm_if_connected(4, "4")
  rq_print_connected_grippers()
  rq_gripper_communication_thread = run rq_gripper_communication()
  set_closed_norm(100.0, 1)
  set_open_norm(0.0, 1)
  set_closed_mm(0.0, 1)
  set_open_mm(50.0, 1)
  set_closed_norm(100.0, 2)
  set_open_norm(0.0, 2)
  set_closed_mm(0.0, 2)
  set_open_mm(50.0, 2)
  set_closed_norm(100.0, 3)
  set_open_norm(0.0, 3)
  set_closed_mm(0.0, 3)
  set_open_mm(50.0, 3)
  set_closed_norm(100.0, 4)
  set_open_norm(0.0, 4)
  set_closed_mm(0.0, 4)
  set_open_mm(50.0, 4)
  rq_current_limit_enabled = False
  while(not rq_gripper_communication_thread_started):
      sleep(0.008)
  end
  # end: URCap Installation Node
  step_count_6f5ccb1a_e640_4da3_bfd2_40e239d724c0 = 0.0
  thread Step_Counter_Thread_dce1a192_0697_4136_975c_3f443e1826c0():
    while (True):
      step_count_6f5ccb1a_e640_4da3_bfd2_40e239d724c0 = step_count_6f5ccb1a_e640_4da3_bfd2_40e239d724c0 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_dce1a192_0697_4136_975c_3f443e1826c0()
  global Pallet_1_cnt1=1
  global Pallet_1_lct=1
  global Pallet_1_lno=1
  global Pallet_1_sep= False 
  global Pallet_1_tct=1
  global ready_bottle_01_p=p[.390695686427, .546143722526, .354784252936, -1.202154726952, -2.902476248553, -.000065055908]
  global ready_bottle_01_q=[1.2121562957763672, -1.5242460531047364, -1.8409428596496582, -1.3471840184978028, 1.569084882736206, -2.714905563985006]
  global Approach_p=p[.547491153120, .654222384983, -.068387800069, 1.202193147572, 2.902469227050, .000121933136]
  global Approach_q=[1.079941749572754, -2.4608241520323695, -1.818922519683838, -0.4325900834849854, 1.569946050643921, -2.84857422510256]
  global ToolActionPoint_p=p[.547456310296, .654165465094, -.466875056309, 1.202132749463, 2.902463524491, -.000036040777]
  global ToolActionPoint_q=[1.0798958534460201, -3.092485844440475, -1.4373697255328164, -0.182578185020553, 1.5701887189532613, -2.8485011726798497]
  global Exit_1_p=p[.547471692821, .654225285966, -.113240204994, 1.202149918204, 2.902456390812, .000132406260]
  global Exit_1_q=[1.0799791934124974, -2.5300233635810003, -1.7983936890644978, -0.38391026593322053, 1.5699977418301563, -2.8485885945959932]
  global other_side_botl_p=p[-.131302644250, .581179310947, .471637250643, 1.202107245272, 2.902505419242, .000006210820]
  global other_side_botl_q=[2.0894155502319336, -1.3711059850505372, -1.7675957679748535, -1.573710104028219, 1.5691683292388916, -1.8372095266925257]
  global bottle_insert_p=p[-.131260964550, .980471403249, .471604896898, 1.202196404184, 2.902428691936, .000004532766]
  global bottle_insert_q=[1.880312442779541, -2.055948873559469, -0.9804320335388184, -1.6760550938048304, 1.5698020458221436, -2.045520607625143]
  global bottle_placed_p=p[-.131258911804, .980469640209, .306164973509, -1.202200405733, -2.902392835778, -.000046866587]
  global bottle_placed_q=[1.880561113357544, -2.0672136745848597, -1.2540980577468872, -1.3910349768451233, 1.5695239305496216, -2.0459168593036097]
  global bottle_left_p=p[-.131220480029, .980475238550, .407942093095, -1.202222478666, -2.902455166129, -.000055421236]
  global bottle_left_q=[1.8803844451904297, -2.050185819665426, -1.1006345748901367, -1.5615647596171875, 1.5696470737457275, -2.0457008520709437]
  global Waypoint_1_p=p[-.642107095425, .666282486477, .300000000000, .017110052262, 3.141514691896, -.000101435305]
  global Waypoint_1_q=[2.5268598030394767, -1.9627318786897927, -1.4187371386550547, -1.331007934561983, 1.5694235174349547, -2.174366234433882]
  global towards_tool_p=p[-.319103721707, .922274672984, .289488424593, -2.161715004584, 2.087946977393, .189764243643]
  global towards_tool_q=[2.109555244445801, -2.0061499081053675, -1.4868388175964355, -1.0633927148631592, 1.4768521785736084, 2.067403554916382]
  global opener_release_p=p[-.319041217029, .960983395363, .063631881470, -2.151377132576, 2.078331762283, .208011082729]
  global opener_release_q=[2.0912246704101562, -2.235462804833883, -1.5705714225769043, -0.7327280801585694, 1.4711558818817139, 2.0473134517669678]
  global Waypoint_2_p=p[-.130580669380, .976983076115, .465670208769, -1.211351089344, 1.169811544850, 1.192461372640]
  global Waypoint_2_q=[2.048638343811035, -1.9488769970335902, -1.9945645332336426, 0.8238295751759033, 1.0946009159088135, -4.7583046595202845]
  global Waypoint_3_p=p[-.130500299950, .978149746807, .289697846114, -1.201141215498, 1.186848407184, 1.212169596068]
  global Waypoint_3_q=[2.046792984008789, -2.209787984887594, -2.0315918922424316, 1.1217116552540283, 1.098623514175415, -4.7331653277026575]
  global Waypoint_4_p=p[-.128825153461, .982323687907, .290256016280, -.673557451662, .725956132353, 1.488202477063]
  global Waypoint_4_q=[1.9992650747299194, -2.605262895623678, -1.638580322265625, 1.8312062460133056, 1.2280412912368774, -4.949915353451864]
  global Waypoint_7_p=p[-.128786997274, .992110967731, .291362608216, -.774623003114, .830703590919, 1.448526193777]
  global Waypoint_7_q=[2.0093674659729004, -2.5409466228880824, -1.719653606414795, 1.7121011453815917, 1.185677170753479, -4.909483496342794]
  global Waypoint_5_p=p[-.130885594544, .990636414244, .290303660438, -1.093247620272, 1.014798422788, 1.277726987509]
  global Waypoint_5_q=[2.0226666927337646, -2.338917394677633, -1.9369897842407227, 1.357553406352661, 1.154337763786316, -4.854938570653097]
  global Waypoint_6_p=p[-.129580234191, .994111291374, .289563055839, -1.211278069791, 1.169892183217, 1.192387357827]
  global Waypoint_6_q=[2.0349059104919434, -2.223354002038473, -1.9993042945861816, 1.1026395994373779, 1.1086199283599854, -4.757455412541525]
  global put_opener_back_p=p[-.319099897221, .974896383339, .066796819335, -2.237817946884, 2.161546728532, .045382917786]
  global put_opener_back_q=[2.062997817993164, -2.282285829583639, -1.4317312240600586, -0.9614525598338624, 1.549813985824585, 2.027625799179077]
  global release_opener_p=p[-.319054355550, .963210691229, .061049693193, -2.161547074700, 2.088102897465, .189944602177]
  global release_opener_q=[2.0875582695007324, -2.2436233959593714, -1.555147647857666, -0.7554741662791749, 1.4804890155792236, 2.045177698135376]
  $ 2 "BeforeStart"
  $ 3 "ready_to_take≔ False "
  global ready_to_take=  False  
  $ 4 "Loop_1≔0"
  global Loop_1=0
  $ 5 "Set"
  set_tcp(p[0.0,0.0,0.195,0.0,0.0,0.0])
  thread EventThread():
    while (True):
      if (ready_to_take ==   True  ):
        $ 316 "Set Start=On"
        set_standard_digital_out(0, True)
        $ 317 "Wait: 0.25"
        sleep(0.25)
        $ 318 "Set Start=Off"
        set_standard_digital_out(0, False)
        $ 319 "Wait: 0.25"
        sleep(0.25)
        $ 320 "If bottle_sensor≟ False "
        if (get_standard_digital_in(1) ==   False  ):
          $ 321 "ready_to_take≔ False "
          global ready_to_take=  False  
        end
      end
      sync()
    end
  end
  eventThread = run EventThread()
  $ 6 "Robot Program"
  # begin: URCap Program Node
  #   Source: triplea-wingman, 1.4.0, tripleA robotics ApS
  #   Type: AAA - Tools
  $ 7 "AAA - Tools"
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: triplea-wingman, 1.4.0, tripleA robotics ApS
  #   Type: AAA - Get Tool
  $ 28 "AAA - Get T2           "
  $ 29 "Waypoints" "noBreak"
  $ 30 "tool_id_3≔'4a342d3e-ee93-4452-a102-fbcfc7771081'" "noBreak"
  global tool_id_3="4a342d3e-ee93-4452-a102-fbcfc7771081"
  $ 31 "tool_w1_3≔aaa_get_w(1, tool_id_3)" "noBreak"
  global tool_w1_3= aaa_get_w (1, tool_id_3)
  $ 32 "tool_w2_3≔aaa_get_w(2, tool_id_3)" "noBreak"
  global tool_w2_3= aaa_get_w (2, tool_id_3)
  $ 33 "tool_w3_3≔aaa_get_w(3, tool_id_3)" "noBreak"
  global tool_w3_3= aaa_get_w (3, tool_id_3)
  $ 34 "tool_w4_3≔aaa_get_w(4, tool_id_3)" "noBreak"
  global tool_w4_3= aaa_get_w (4, tool_id_3)
  $ 35 "tool_w0_3≔p[-0.6421144476781483, 0.6662879733766134, 0.20146973407971586, -0.017117761578530566, -3.1415327532565667, 1.0693642370029629E-4]" "noBreak"
  global tool_w0_3=p[-0.6421144476781483, 0.6662879733766134, 0.20146973407971586, -0.017117761578530566, -3.1415327532565667, 1.0693642370029629E-4]
  $ 36 "tool_w5_3≔p[-0.6421260084190709, 0.66626936215097, 0.20144070436964534, 0.01707995256586941, 3.1415293685776366, -1.3993269374544494E-4]" "noBreak"
  global tool_w5_3=p[-0.6421260084190709, 0.66626936215097, 0.20144070436964534, 0.01707995256586941, 3.1415293685776366, -1.3993269374544494E-4]
  $ 37 "Moving to Waypoints" "noBreak"
  $ 38 "'Setting Change TCP'" "noBreak"
  # 'Setting Change TCP'
  $ 39 "set_change_tc_3≔aaa_set_change_tcp(tool_id_3)" "noBreak"
  global set_change_tc_3= aaa_set_change_tcp (tool_id_3)
  $ 40 "'Setting Change Payload and Cog'" "noBreak"
  # 'Setting Change Payload and Cog'
  $ 41 "set_change_pc_3≔aaa_set_change_payload(tool_id_3)" "noBreak"
  global set_change_pc_3= aaa_set_change_payload (tool_id_3)
  $ 42 "'Enter Path'" "noBreak"
  # 'Enter Path'
  $ 43 "MoveL" "noBreak"
  $ 44 "tool_w0_3" "noBreak"
  movel(tool_w0_3, a=1.2, v=0.25)
  $ 45 "MoveL" "noBreak"
  $ 46 "tool_w1_3" "noBreak"
  movel(tool_w1_3, a=1.2, v=0.25)
  $ 47 "AAA script at W1" "noBreak"
  $ 48 "'Setting voltage to 0'" "noBreak"
  # 'Setting voltage to 0'
  $ 49 "set_w1_volt_3≔set_tool_voltage(0)" "noBreak"
  global set_w1_volt_3= set_tool_voltage (0)
  $ 50 "MoveL" "noBreak"
  $ 51 "tool_w2_3" "noBreak"
  movel(tool_w2_3, a=0.2, v=0.02)
  $ 52 "tool_w3_3" "noBreak"
  movel(tool_w3_3, a=0.2, v=0.02, r=0.01)
  $ 53 "Set User Payload and COG" "noBreak"
  $ 54 "set_user_pc_3≔aaa_set_user_payload(tool_id_3)" "noBreak"
  global set_user_pc_3= aaa_set_user_payload (tool_id_3)
  $ 55 "tool_w4_3" "noBreak"
  movel(tool_w4_3, a=0.2, v=0.02, r=0.005)
  $ 56 "AAA script at W4" "noBreak"
  $ 57 "'Using Standard Output'" "noBreak"
  # 'Using Standard Output'
  $ 58 "set_output_mo_1≔set_tool_output_mode(0)" "noBreak"
  global set_output_mo_1= set_tool_output_mode (0)
  $ 59 "set_dout_2≔set_tool_digital_output_mode(0, 2)" "noBreak"
  global set_dout_2= set_tool_digital_output_mode (0, 2)
  $ 60 "set_dout_3≔set_tool_digital_output_mode(1, 2)" "noBreak"
  global set_dout_3= set_tool_digital_output_mode (1, 2)
  $ 61 "set_tool_volt_3≔set_tool_voltage(24)" "noBreak"
  global set_tool_volt_3= set_tool_voltage (24)
  $ 62 "'Exit Path'" "noBreak"
  # 'Exit Path'
  $ 63 "MoveL" "noBreak"
  $ 64 "tool_w5_3" "noBreak"
  movel(tool_w5_3, a=1.2, v=0.25)
  $ 65 "Setting user TCP" "noBreak"
  $ 66 "set_user_tcp_1≔aaa_set_user_tcp(tool_id_3)" "noBreak"
  global set_user_tcp_1= aaa_set_user_tcp (tool_id_3)
  # end: URCap Program Node
  $ 67 "MoveJ"
  $ 68 "ready_bottle_01" "breakAfter"
  movej(get_inverse_kin(ready_bottle_01_p, qnear=ready_bottle_01_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 69 "Loop 20 times"
  Loop_1 = 0
  while (Loop_1 < 20):
    $ 70 "Wait bottle_sensor=LO"
    while (get_standard_digital_in(1) == True):
      sync()
    end
    $ 71 "ready_to_take≔ False "
    global ready_to_take=  False  
    $ 72 "Wait: 1.0"
    sleep(1.0)
    $ 73 "Set Start=On"
    set_standard_digital_out(0, True)
    $ 74 "Wait Start_buttom=HI"
    while (get_standard_digital_in(0) == False):
      sync()
    end
    $ 75 "Set Start=Off"
    set_standard_digital_out(0, False)
    $ 76 "Pallet_1"
    def Pallet_1_trans(pose):
    return p[pose[0], pose[1], pose[2], 0, 0, 0]
  end
  def Pallet_1_rot(pose):
  return p[0, 0, 0, pose[3], pose[4], pose[5]]
  end
  def Pallet_1_compute_pallet_waypoint(T_base_feature_taught, T_feature_referencePoint_taught, T_referencePoint_approach_taught, T_base_feature, T_base_referencePoint):
  local trans_referencePoint_approach_in_feature_taught = pose_sub(Pallet_1_trans(pose_trans(T_feature_referencePoint_taught, T_referencePoint_approach_taught)), Pallet_1_trans(T_feature_referencePoint_taught))
  local rot_referencePoint_approach_in_feature_taught = pose_trans(Pallet_1_rot(T_feature_referencePoint_taught), pose_trans(Pallet_1_rot(T_referencePoint_approach_taught), pose_inv(Pallet_1_rot(T_feature_referencePoint_taught))))
  T_feature_referencePoint = pose_trans(pose_inv(T_base_feature), T_base_referencePoint)
  rot_referencePoint_approach = pose_trans(pose_inv(Pallet_1_rot(T_feature_referencePoint)), pose_trans(rot_referencePoint_approach_in_feature_taught, Pallet_1_rot(T_feature_referencePoint)))
  T_feature_approach = pose_trans(trans_referencePoint_approach_in_feature_taught, pose_trans(T_feature_referencePoint, rot_referencePoint_approach))
  T_base_approach = pose_trans(T_base_feature, T_feature_approach)
  return T_base_approach
  end
  Pallet_1_tct = 20
  if (Pallet_1_cnt1 > 20 or Pallet_1_cnt1 < 1):
    Pallet_1_cnt1 = 1
  end
  $ 77 "Patterns" "noBreak"
  $ 78 "Bierkisten" "noBreak"
  $ 83 "Layers" "noBreak"
  if (Pallet_1_cnt1 < 21):
    Pallet_1_lno = 1
    Pallet_1_lct = Pallet_1_cnt1
    global CornerItem_1=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.547456310296, .654165465094, -.466875056309, 1.202132749464, 2.902463524495, -.000036040781]))
    global CornerItem_2=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.255583455772, .658553152541, -.466885764013, 1.202183125409, 2.902424122183, .000039330012]))
    global CornerItem_3=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.252284532779, .448281458720, -.466787023823, -1.198647047037, -2.893601694178, .004266709226]))
    global CornerItem_4=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.547223255359, .446272651206, -.466853397510, -1.202135566826, -2.902466008849, -.000024200332]))
    Pallet_1_cnt1_x = (Pallet_1_lct - 1) % 5
    Pallet_1_cnt1_y = floor((Pallet_1_lct - 1) / 5)
    referencePoint = interpolate_pose(interpolate_pose(CornerItem_1, CornerItem_2, Pallet_1_cnt1_x/4), interpolate_pose(CornerItem_4, CornerItem_3,Pallet_1_cnt1_x/4), Pallet_1_cnt1_y/3)
    direction = p[0,0,1,0,0,0]
    referencePoint = pose_add (referencePoint,p[0.0*direction[0],0.0*direction[1],0.0*direction[2],0,0,0])
  end
  Approach_p = Pallet_1_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.5474563102958362,0.6541654650937244,-0.46687505630886694,1.202132749464188,2.90246352449483,-3.604078102808996E-5]), p[1.1660793748785592E-6,6.097173717700688E-5,-0.3984872571625544,-8.205397251571686E-5,6.470613541237836E-5,3.4136223316427125E-5], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoint)
  Approach_p = pose_trans(p[0.5474563102958362,0.6541654650937244,-0.46687505630886694,1.2021327494670466,2.902463524501732,-3.6040774637205476E-5], pose_trans(pose_inv(referencePoint), Approach_p))
  ToolActionPoint_p = Pallet_1_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.5474563102958362,0.6541654650937244,-0.46687505630886694,1.202132749464188,2.90246352449483,-3.604078102808996E-5]), p[-5.551115123125783E-17,-1.1102230246251565E-16,0.0,-2.7441461671829574E-12,-1.099368366185168E-11,3.5712370008347063E-13], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoint)
  ToolActionPoint_p = pose_trans(p[0.5474563102958362,0.6541654650937244,-0.46687505630886694,1.2021327494670466,2.902463524501732,-3.6040774637205476E-5], pose_trans(pose_inv(referencePoint), ToolActionPoint_p))
  Exit_1_p = Pallet_1_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.5474563102958362,0.6541654650937244,-0.46687505630886694,1.202132749464188,2.90246352449483,-3.604078102808996E-5]), p[1.860402541670192E-5,4.970421858563334E-5,-0.3536348527263402,-9.908286752325829E-5,4.1018018506442885E-5,1.1837606331770305E-5], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoint)
  Exit_1_p = pose_trans(p[0.5474563102958362,0.6541654650937244,-0.46687505630886694,1.2021327494670466,2.902463524501732,-3.6040774637205476E-5], pose_trans(pose_inv(referencePoint), Exit_1_p))
  $ 84 "At Each Item" "noBreak"
  $ 85 "Generated Movements" "noBreak"
  $ 86 "MoveJ" "noBreak"
  $ 87 "Approach" "noBreak"
  movej(get_inverse_kin(pose_trans(referencePoint, pose_trans(p[-.075418209057, -.849684240225, -.466863975119, -1.202132749467, -2.902463524502, .000036040775], Approach_p)), qnear=Approach_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 88 "MoveL" "noBreak"
  $ 89 "ToolActionPoint" "noBreak"
  movel(pose_trans(referencePoint, pose_trans(p[-.075418209057, -.849684240225, -.466863975119, -1.202132749467, -2.902463524502, .000036040775], ToolActionPoint_p)), a=1.2, v=0.15)
  $ 90 "Tool action" "noBreak"
  $ 91 "Set TO[1]=Off" "noBreak"
  set_tool_digital_out(1, False)
  $ 92 "Wait: 0.15" "noBreak"
  sleep(0.15)
  $ 93 "Set TO[0]=On" "noBreak"
  set_tool_digital_out(0, True)
  $ 94 "Wait: 1.0" "noBreak"
  sleep(1.0)
  $ 95 "MoveL" "noBreak"
  $ 96 "Exit_1" "noBreak"
  movel(pose_trans(referencePoint, pose_trans(p[-.075418209057, -.849684240225, -.466863975119, -1.202132749467, -2.902463524502, .000036040775], Exit_1_p)), a=1.2, v=0.25)
  Pallet_1_sep = False
  if (Pallet_1_cnt1 >= 20):
    Pallet_1_cnt1 = 1
  else:
    Pallet_1_cnt1 = Pallet_1_cnt1 + 1
  end
  $ 97 "MoveL"
  $ 98 "ready_bottle_01" "breakAfter"
  movel(ready_bottle_01_p, a=1.0, v=0.3)
  $ 99 "other_side_botl" "breakAfter"
  movel(other_side_botl_p, a=1.0, v=0.3)
  $ 100 "bottle_insert" "breakAfter"
  movel(bottle_insert_p, a=1.0, v=0.3)
  $ 101 "bottle_placed" "breakAfter"
  movel(bottle_placed_p, a=1.2, v=0.05)
  $ 102 "Set TO[0]=Off"
  set_tool_digital_out(0, False)
  $ 103 "Wait: 0.15"
  sleep(0.15)
  $ 104 "Set TO[1]=On"
  set_tool_digital_out(1, True)
  $ 105 "Wait: 0.5"
  sleep(0.5)
  $ 106 "bottle_left" "breakAfter"
  movel(bottle_left_p, a=1.0, v=0.3)
  # begin: URCap Program Node
  #   Source: triplea-wingman, 1.4.0, tripleA robotics ApS
  #   Type: AAA - Put Tool 
  $ 107 "AAA - Put T2           "
  $ 108 "Waypoints" "noBreak"
  $ 109 "tool_id_4≔'4a342d3e-ee93-4452-a102-fbcfc7771081'" "noBreak"
  global tool_id_4="4a342d3e-ee93-4452-a102-fbcfc7771081"
  $ 110 "tool_w1_4≔aaa_get_w(1, tool_id_4)" "noBreak"
  global tool_w1_4= aaa_get_w (1, tool_id_4)
  $ 111 "tool_w2_4≔aaa_get_w(2, tool_id_4)" "noBreak"
  global tool_w2_4= aaa_get_w (2, tool_id_4)
  $ 112 "tool_w3_4≔aaa_get_w(3, tool_id_4)" "noBreak"
  global tool_w3_4= aaa_get_w (3, tool_id_4)
  $ 113 "tool_w4_4≔aaa_get_w(4, tool_id_4)" "noBreak"
  global tool_w4_4= aaa_get_w (4, tool_id_4)
  $ 114 "tool_w0_4≔p[-0.6421144476781483, 0.6662879733766134, 0.20146973407971586, -0.017117761578530566, -3.1415327532565667, 1.0693642370029629E-4]" "noBreak"
  global tool_w0_4=p[-0.6421144476781483, 0.6662879733766134, 0.20146973407971586, -0.017117761578530566, -3.1415327532565667, 1.0693642370029629E-4]
  $ 115 "tool_w5_4≔p[-0.6421260084190709, 0.66626936215097, 0.20144070436964534, 0.01707995256586941, 3.1415293685776366, -1.3993269374544494E-4]" "noBreak"
  global tool_w5_4=p[-0.6421260084190709, 0.66626936215097, 0.20144070436964534, 0.01707995256586941, 3.1415293685776366, -1.3993269374544494E-4]
  $ 116 "Moving to Waypoints" "noBreak"
  $ 117 "'Setting Change TCP'" "noBreak"
  # 'Setting Change TCP'
  $ 118 "set_change_tc_4≔aaa_set_change_tcp(tool_id_4)" "noBreak"
  global set_change_tc_4= aaa_set_change_tcp (tool_id_4)
  $ 119 "set_user_pc_4≔aaa_set_user_payload(tool_id_4)" "noBreak"
  global set_user_pc_4= aaa_set_user_payload (tool_id_4)
  $ 120 "'Exit Path'" "noBreak"
  # 'Exit Path'
  $ 121 "MoveL" "noBreak"
  $ 122 "tool_w5_4" "noBreak"
  movel(tool_w5_4, a=1.2, v=0.25)
  $ 123 "MoveL" "noBreak"
  $ 124 "tool_w4_4" "noBreak"
  movel(tool_w4_4, a=1.2, v=0.25, r=0.005)
  $ 125 "AAA script at W4" "noBreak"
  $ 126 "set_tool_volt_4≔set_tool_voltage(0)" "noBreak"
  global set_tool_volt_4= set_tool_voltage (0)
  $ 127 "MoveL" "noBreak"
  $ 128 "tool_w3_4" "noBreak"
  movel(tool_w3_4, a=0.2, v=0.02, r=0.01)
  $ 129 "Set Change Payload and COG" "noBreak"
  $ 130 "set_change_pc_4≔aaa_set_change_payload(tool_id_4)" "noBreak"
  global set_change_pc_4= aaa_set_change_payload (tool_id_4)
  $ 131 "tool_w2_4" "noBreak"
  movel(tool_w2_4, a=0.2, v=0.02)
  $ 132 "AAA script at W1" "noBreak"
  $ 133 "'Setting voltage to 0'" "noBreak"
  # 'Setting voltage to 0'
  $ 134 "set_w1_volt_4≔set_tool_voltage(0)" "noBreak"
  global set_w1_volt_4= set_tool_voltage (0)
  $ 135 "tool_w1_4" "noBreak"
  movel(tool_w1_4, a=0.2, v=0.02)
  $ 136 "'Enter Path'" "noBreak"
  # 'Enter Path'
  $ 137 "MoveL" "noBreak"
  $ 138 "tool_w0_4" "noBreak"
  movel(tool_w0_4, a=1.2, v=0.25)
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: triplea-wingman, 1.4.0, tripleA robotics ApS
  #   Type: AAA - Get Tool
  $ 139 "AAA - Get Robotiq_e           "
  $ 140 "Waypoints" "noBreak"
  $ 141 "tool_id≔'4b514240-cf4e-4bf1-8bd0-419c27a4d488'" "noBreak"
  global tool_id="4b514240-cf4e-4bf1-8bd0-419c27a4d488"
  $ 142 "tool_w1≔aaa_get_w(1, tool_id)" "noBreak"
  global tool_w1= aaa_get_w (1, tool_id)
  $ 143 "tool_w2≔aaa_get_w(2, tool_id)" "noBreak"
  global tool_w2= aaa_get_w (2, tool_id)
  $ 144 "tool_w3≔aaa_get_w(3, tool_id)" "noBreak"
  global tool_w3= aaa_get_w (3, tool_id)
  $ 145 "tool_w4≔aaa_get_w(4, tool_id)" "noBreak"
  global tool_w4= aaa_get_w (4, tool_id)
  $ 146 "tool_w0≔p[-0.6421231560845492, 0.6662690344927905, 0.20142700950352788, 0.017023535316556416, 3.141493526432438, -1.5673970200807575E-4]" "noBreak"
  global tool_w0=p[-0.6421231560845492, 0.6662690344927905, 0.20142700950352788, 0.017023535316556416, 3.141493526432438, -1.5673970200807575E-4]
  $ 147 "tool_w5≔p[-0.6421151581475879, 0.6662702288012549, 0.20146681548744672, -0.01704285243180614, -3.1415231156302963, 1.6352643870166494E-4]" "noBreak"
  global tool_w5=p[-0.6421151581475879, 0.6662702288012549, 0.20146681548744672, -0.01704285243180614, -3.1415231156302963, 1.6352643870166494E-4]
  $ 148 "Moving to Waypoints" "noBreak"
  $ 149 "'Setting Change TCP'" "noBreak"
  # 'Setting Change TCP'
  $ 150 "set_change_tcp≔aaa_set_change_tcp(tool_id)" "noBreak"
  global set_change_tcp= aaa_set_change_tcp (tool_id)
  $ 151 "'Setting Change Payload and Cog'" "noBreak"
  # 'Setting Change Payload and Cog'
  $ 152 "set_change_pc≔aaa_set_change_payload(tool_id)" "noBreak"
  global set_change_pc= aaa_set_change_payload (tool_id)
  $ 153 "'Enter Path'" "noBreak"
  # 'Enter Path'
  $ 154 "MoveL" "noBreak"
  $ 155 "tool_w0" "noBreak"
  movel(tool_w0, a=1.2, v=0.25)
  $ 156 "MoveL" "noBreak"
  $ 157 "tool_w1" "noBreak"
  movel(tool_w1, a=1.2, v=0.25)
  $ 158 "AAA script at W1" "noBreak"
  $ 159 "'Setting voltage to 0'" "noBreak"
  # 'Setting voltage to 0'
  $ 160 "set_w1_volt≔set_tool_voltage(0)" "noBreak"
  global set_w1_volt= set_tool_voltage (0)
  $ 161 "MoveL" "noBreak"
  $ 162 "tool_w2" "noBreak"
  movel(tool_w2, a=0.2, v=0.02)
  $ 163 "tool_w3" "noBreak"
  movel(tool_w3, a=0.2, v=0.02, r=0.01)
  $ 164 "Set User Payload and COG" "noBreak"
  $ 165 "set_user_pc≔aaa_set_user_payload(tool_id)" "noBreak"
  global set_user_pc= aaa_set_user_payload (tool_id)
  $ 166 "tool_w4" "noBreak"
  movel(tool_w4, a=0.2, v=0.02, r=0.005)
  $ 167 "AAA script at W4" "noBreak"
  $ 168 "'Using Standard Output'" "noBreak"
  # 'Using Standard Output'
  $ 169 "set_output_mode≔set_tool_output_mode(0)" "noBreak"
  global set_output_mode= set_tool_output_mode (0)
  $ 170 "set_dout_0≔set_tool_digital_output_mode(0, 1)" "noBreak"
  global set_dout_0= set_tool_digital_output_mode (0, 1)
  $ 171 "set_dout_1≔set_tool_digital_output_mode(1, 1)" "noBreak"
  global set_dout_1= set_tool_digital_output_mode (1, 1)
  $ 172 "set_tool_volt≔set_tool_voltage(24)" "noBreak"
  global set_tool_volt= set_tool_voltage (24)
  $ 173 "'Exit Path'" "noBreak"
  # 'Exit Path'
  $ 174 "MoveL" "noBreak"
  $ 175 "tool_w5" "noBreak"
  movel(tool_w5, a=1.2, v=0.25)
  $ 176 "Setting user TCP" "noBreak"
  $ 177 "set_user_tcp≔aaa_set_user_tcp(tool_id)" "noBreak"
  global set_user_tcp= aaa_set_user_tcp (tool_id)
  $ 178 "Wait: 4.0" "noBreak"
  sleep(4.0)
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper Activate
  $ 179 "Gripper Activate" "noBreak"
  
  kill rq_gripper_communication_thread
  rq_gripper_communication_thread_started = False
  rq_close_gripper_socket("1")
  rq_close_gripper_socket("2")
  rq_close_gripper_socket("3")
  rq_close_gripper_socket("4")
  
  rq_init_comm_if_connected(9, "1")
  rq_init_comm_if_connected(2, "2")
  rq_init_comm_if_connected(3, "3")
  rq_init_comm_if_connected(4, "4")
  rq_print_connected_grippers()
  rq_gripper_communication_thread = run rq_gripper_communication()
  
  while(not rq_gripper_communication_thread_started):
      sleep(0.008)
  end
  
  rq_set_max_current_for_all_grippers()
  
  reset_and_activate = False
  
  rq_activate_all_grippers(False)
  # end: URCap Program Node
  $ 180 "If rq_is_gripper_connected()≟ False " "noBreak"
  if (rq_is_gripper_connected() ==   False  ):
    $ 181 "Wait: 2.0" "noBreak"
    sleep(2.0)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Gripper Activate
    $ 182 "Gripper Reset and Activate" "noBreak"
    
    kill rq_gripper_communication_thread
    rq_gripper_communication_thread_started = False
    rq_close_gripper_socket("1")
    rq_close_gripper_socket("2")
    rq_close_gripper_socket("3")
    rq_close_gripper_socket("4")
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    rq_print_connected_grippers()
    rq_gripper_communication_thread = run rq_gripper_communication()
    
    while(not rq_gripper_communication_thread_started):
        sleep(0.008)
    end
    
    rq_set_max_current_for_all_grippers()
    
    reset_and_activate = True
    
    rq_activate_all_grippers(True)
    # end: URCap Program Node
  end
  # end: URCap Program Node
  $ 183 "MoveL"
  $ 184 "Waypoint_1" "breakAfter"
  movel(Waypoint_1_p, a=1.0, v=0.3)
  $ 185 "towards_tool" "breakAfter"
  movel(towards_tool_p, a=1.0, v=0.3)
  $ 186 "Set"
  set_tcp(p[0.0,0.0,0.157,0.0,0.0,0.0])
  $ 187 "opener_release" "breakAfter"
  movel(opener_release_p, a=1.0, v=0.3)
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  $ 188 "Gripper Close (1)"
  if not(gripper_connected[0]):
    popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
  end
  if not(rq_is_gripper_activated("1")):
    popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
  end
  rq_set_pos_spd_for(255, 255, 255, "1")
  rq_wait_pos_spe_for_request(255, 255, 255, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 189 "towards_tool" "breakAfter"
  movel(towards_tool_p, a=1.0, v=0.3)
  $ 190 "Set"
  set_tcp(p[0.0,0.0,0.23,0.0,0.0,0.0])
  $ 191 "Set Payload: 5.000kg CoG=[0.00mm, 0.00mm, 0.00mm]"
  set_target_payload(5.000000, [0.000000, 0.000000, 0.000000], [0.022505, 0.022505, 0.022505, 0.000000, 0.000000, 0.000000])
  $ 192 "Waypoint_2" "breakAfter"
  movel(Waypoint_2_p, a=1.0, v=0.3)
  $ 193 "Waypoint_3" "breakAfter"
  movel(Waypoint_3_p, a=1.0, v=0.3)
  $ 194 "Waypoint_4" "breakAfter"
  movel(Waypoint_4_p, a=1.0, v=0.05)
  $ 195 "Waypoint_7" "breakAfter"
  movel(Waypoint_7_p, a=1.0, v=0.05)
  $ 196 "Waypoint_5" "breakAfter"
  movel(Waypoint_5_p, a=1.0, v=0.05)
  $ 197 "Waypoint_6" "breakAfter"
  movel(Waypoint_6_p, a=1.0, v=0.05)
  $ 198 "Waypoint_2" "breakAfter"
  movel(Waypoint_2_p, a=1.0, v=0.3)
  $ 199 "towards_tool" "breakAfter"
  movel(towards_tool_p, a=1.0, v=0.3)
  $ 200 "Set"
  set_tcp(p[0.0,0.0,0.157,0.0,0.0,0.0])
  $ 201 "Set Payload: Payload"
  set_target_payload(0.150000, [0.000000, 0.000000, 0.100000], [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  $ 202 "put_opener_back" "breakAfter"
  movel(put_opener_back_p, a=1.0, v=0.3)
  $ 203 "ready_to_take≔ True "
  global ready_to_take=  True  
  $ 204 "opener_release" "breakAfter"
  movel(opener_release_p, a=1.0, v=0.3)
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  $ 205 "Gripper Move50% (1)"
  if not(gripper_connected[0]):
    popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
  end
  if not(rq_is_gripper_activated("1")):
    popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
  end
  rq_set_pos_spd_for(128, 0, 0, "1")
  rq_wait_pos_spe_for_request(128, 0, 0, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 206 "release_opener" "breakAfter"
  movel(release_opener_p, a=1.0, v=0.3)
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  $ 207 "Gripper Open (1)"
  if not(gripper_connected[0]):
    popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
  end
  if not(rq_is_gripper_activated("1")):
    popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
  end
  rq_set_pos_spd_for(0, 255, 255, "1")
  rq_wait_pos_spe_for_request(0, 255, 255, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 208 "towards_tool" "breakAfter"
  movel(towards_tool_p, a=1.0, v=0.3)
  $ 209 "Waypoint_1" "breakAfter"
  movel(Waypoint_1_p, a=1.0, v=0.3)
  # begin: URCap Program Node
  #   Source: triplea-wingman, 1.4.0, tripleA robotics ApS
  #   Type: AAA - Put Tool 
  $ 210 "AAA - Put Robotiq_e           "
  $ 211 "Waypoints" "noBreak"
  $ 212 "tool_id_7≔'4b514240-cf4e-4bf1-8bd0-419c27a4d488'" "noBreak"
  global tool_id_7="4b514240-cf4e-4bf1-8bd0-419c27a4d488"
  $ 213 "tool_w1_7≔aaa_get_w(1, tool_id_7)" "noBreak"
  global tool_w1_7= aaa_get_w (1, tool_id_7)
  $ 214 "tool_w2_7≔aaa_get_w(2, tool_id_7)" "noBreak"
  global tool_w2_7= aaa_get_w (2, tool_id_7)
  $ 215 "tool_w3_7≔aaa_get_w(3, tool_id_7)" "noBreak"
  global tool_w3_7= aaa_get_w (3, tool_id_7)
  $ 216 "tool_w4_7≔aaa_get_w(4, tool_id_7)" "noBreak"
  global tool_w4_7= aaa_get_w (4, tool_id_7)
  $ 217 "tool_w0_7≔p[-0.6421231560845492, 0.6662690344927905, 0.20142700950352788, 0.017023535316556416, 3.141493526432438, -1.5673970200807575E-4]" "noBreak"
  global tool_w0_7=p[-0.6421231560845492, 0.6662690344927905, 0.20142700950352788, 0.017023535316556416, 3.141493526432438, -1.5673970200807575E-4]
  $ 218 "tool_w5_7≔p[-0.6421151581475879, 0.6662702288012549, 0.20146681548744672, -0.01704285243180614, -3.1415231156302963, 1.6352643870166494E-4]" "noBreak"
  global tool_w5_7=p[-0.6421151581475879, 0.6662702288012549, 0.20146681548744672, -0.01704285243180614, -3.1415231156302963, 1.6352643870166494E-4]
  $ 219 "Moving to Waypoints" "noBreak"
  $ 220 "'Setting Change TCP'" "noBreak"
  # 'Setting Change TCP'
  $ 221 "set_change_tc_7≔aaa_set_change_tcp(tool_id_7)" "noBreak"
  global set_change_tc_7= aaa_set_change_tcp (tool_id_7)
  $ 222 "set_user_pc_7≔aaa_set_user_payload(tool_id_7)" "noBreak"
  global set_user_pc_7= aaa_set_user_payload (tool_id_7)
  $ 223 "'Exit Path'" "noBreak"
  # 'Exit Path'
  $ 224 "MoveL" "noBreak"
  $ 225 "tool_w5_7" "noBreak"
  movel(tool_w5_7, a=1.2, v=0.25)
  $ 226 "MoveL" "noBreak"
  $ 227 "tool_w4_7" "noBreak"
  movel(tool_w4_7, a=1.2, v=0.25, r=0.005)
  $ 228 "AAA script at W4" "noBreak"
  $ 229 "set_tool_volt_7≔set_tool_voltage(0)" "noBreak"
  global set_tool_volt_7= set_tool_voltage (0)
  $ 230 "MoveL" "noBreak"
  $ 231 "tool_w3_7" "noBreak"
  movel(tool_w3_7, a=0.2, v=0.02, r=0.01)
  $ 232 "Set Change Payload and COG" "noBreak"
  $ 233 "set_change_pc_7≔aaa_set_change_payload(tool_id_7)" "noBreak"
  global set_change_pc_7= aaa_set_change_payload (tool_id_7)
  $ 234 "tool_w2_7" "noBreak"
  movel(tool_w2_7, a=0.2, v=0.02)
  $ 235 "AAA script at W1" "noBreak"
  $ 236 "'Setting voltage to 0'" "noBreak"
  # 'Setting voltage to 0'
  $ 237 "set_w1_volt_7≔set_tool_voltage(0)" "noBreak"
  global set_w1_volt_7= set_tool_voltage (0)
  $ 238 "tool_w1_7" "noBreak"
  movel(tool_w1_7, a=0.2, v=0.02)
  $ 239 "'Enter Path'" "noBreak"
  # 'Enter Path'
  $ 240 "MoveL" "noBreak"
  $ 241 "tool_w0_7" "noBreak"
  movel(tool_w0_7, a=1.2, v=0.25)
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: triplea-wingman, 1.4.0, tripleA robotics ApS
  #   Type: AAA - Get Tool
  $ 242 "AAA - Get T2           "
  $ 243 "Waypoints" "noBreak"
  $ 244 "tool_id_5≔'4a342d3e-ee93-4452-a102-fbcfc7771081'" "noBreak"
  global tool_id_5="4a342d3e-ee93-4452-a102-fbcfc7771081"
  $ 245 "tool_w1_5≔aaa_get_w(1, tool_id_5)" "noBreak"
  global tool_w1_5= aaa_get_w (1, tool_id_5)
  $ 246 "tool_w2_5≔aaa_get_w(2, tool_id_5)" "noBreak"
  global tool_w2_5= aaa_get_w (2, tool_id_5)
  $ 247 "tool_w3_5≔aaa_get_w(3, tool_id_5)" "noBreak"
  global tool_w3_5= aaa_get_w (3, tool_id_5)
  $ 248 "tool_w4_5≔aaa_get_w(4, tool_id_5)" "noBreak"
  global tool_w4_5= aaa_get_w (4, tool_id_5)
  $ 249 "tool_w0_5≔p[-0.6421144476781483, 0.6662879733766134, 0.20146973407971586, -0.017117761578530566, -3.1415327532565667, 1.0693642370029629E-4]" "noBreak"
  global tool_w0_5=p[-0.6421144476781483, 0.6662879733766134, 0.20146973407971586, -0.017117761578530566, -3.1415327532565667, 1.0693642370029629E-4]
  $ 250 "tool_w5_5≔p[-0.6421260084190709, 0.66626936215097, 0.20144070436964534, 0.01707995256586941, 3.1415293685776366, -1.3993269374544494E-4]" "noBreak"
  global tool_w5_5=p[-0.6421260084190709, 0.66626936215097, 0.20144070436964534, 0.01707995256586941, 3.1415293685776366, -1.3993269374544494E-4]
  $ 251 "Moving to Waypoints" "noBreak"
  $ 252 "'Setting Change TCP'" "noBreak"
  # 'Setting Change TCP'
  $ 253 "set_change_tc_5≔aaa_set_change_tcp(tool_id_5)" "noBreak"
  global set_change_tc_5= aaa_set_change_tcp (tool_id_5)
  $ 254 "'Setting Change Payload and Cog'" "noBreak"
  # 'Setting Change Payload and Cog'
  $ 255 "set_change_pc_5≔aaa_set_change_payload(tool_id_5)" "noBreak"
  global set_change_pc_5= aaa_set_change_payload (tool_id_5)
  $ 256 "'Enter Path'" "noBreak"
  # 'Enter Path'
  $ 257 "MoveL" "noBreak"
  $ 258 "tool_w0_5" "noBreak"
  movel(tool_w0_5, a=1.2, v=0.25)
  $ 259 "MoveL" "noBreak"
  $ 260 "tool_w1_5" "noBreak"
  movel(tool_w1_5, a=1.2, v=0.25)
  $ 261 "AAA script at W1" "noBreak"
  $ 262 "'Setting voltage to 0'" "noBreak"
  # 'Setting voltage to 0'
  $ 263 "set_w1_volt_5≔set_tool_voltage(0)" "noBreak"
  global set_w1_volt_5= set_tool_voltage (0)
  $ 264 "MoveL" "noBreak"
  $ 265 "tool_w2_5" "noBreak"
  movel(tool_w2_5, a=0.2, v=0.02)
  $ 266 "tool_w3_5" "noBreak"
  movel(tool_w3_5, a=0.2, v=0.02, r=0.01)
  $ 267 "Set User Payload and COG" "noBreak"
  $ 268 "set_user_pc_5≔aaa_set_user_payload(tool_id_5)" "noBreak"
  global set_user_pc_5= aaa_set_user_payload (tool_id_5)
  $ 269 "tool_w4_5" "noBreak"
  movel(tool_w4_5, a=0.2, v=0.02, r=0.005)
  $ 270 "AAA script at W4" "noBreak"
  $ 271 "'Using Standard Output'" "noBreak"
  # 'Using Standard Output'
  $ 272 "set_output_mo_4≔set_tool_output_mode(0)" "noBreak"
  global set_output_mo_4= set_tool_output_mode (0)
  $ 273 "set_dout_8≔set_tool_digital_output_mode(0, 2)" "noBreak"
  global set_dout_8= set_tool_digital_output_mode (0, 2)
  $ 274 "set_dout_9≔set_tool_digital_output_mode(1, 2)" "noBreak"
  global set_dout_9= set_tool_digital_output_mode (1, 2)
  $ 275 "set_tool_volt_5≔set_tool_voltage(24)" "noBreak"
  global set_tool_volt_5= set_tool_voltage (24)
  $ 276 "'Exit Path'" "noBreak"
  # 'Exit Path'
  $ 277 "MoveL" "noBreak"
  $ 278 "tool_w5_5" "noBreak"
  movel(tool_w5_5, a=1.2, v=0.25)
  $ 279 "Setting user TCP" "noBreak"
  $ 280 "set_user_tcp_4≔aaa_set_user_tcp(tool_id_5)" "noBreak"
  global set_user_tcp_4= aaa_set_user_tcp (tool_id_5)
  # end: URCap Program Node
  $ 281 "other_side_botl" "breakAfter"
  movel(other_side_botl_p, a=1.0, v=0.3)
  $ 282 "ready_bottle_01" "breakAfter"
  movel(ready_bottle_01_p, a=1.0, v=0.3)
  Loop_1 = Loop_1 + 1
  end
  # begin: URCap Program Node
  #   Source: triplea-wingman, 1.4.0, tripleA robotics ApS
  #   Type: AAA - Put Tool 
  $ 283 "AAA - Put T2           "
  $ 284 "Waypoints" "noBreak"
  $ 285 "tool_id_6≔'4a342d3e-ee93-4452-a102-fbcfc7771081'" "noBreak"
  global tool_id_6="4a342d3e-ee93-4452-a102-fbcfc7771081"
  $ 286 "tool_w1_6≔aaa_get_w(1, tool_id_6)" "noBreak"
  global tool_w1_6= aaa_get_w (1, tool_id_6)
  $ 287 "tool_w2_6≔aaa_get_w(2, tool_id_6)" "noBreak"
  global tool_w2_6= aaa_get_w (2, tool_id_6)
  $ 288 "tool_w3_6≔aaa_get_w(3, tool_id_6)" "noBreak"
  global tool_w3_6= aaa_get_w (3, tool_id_6)
  $ 289 "tool_w4_6≔aaa_get_w(4, tool_id_6)" "noBreak"
  global tool_w4_6= aaa_get_w (4, tool_id_6)
  $ 290 "tool_w0_6≔p[-0.6421144476781483, 0.6662879733766134, 0.20146973407971586, -0.017117761578530566, -3.1415327532565667, 1.0693642370029629E-4]" "noBreak"
  global tool_w0_6=p[-0.6421144476781483, 0.6662879733766134, 0.20146973407971586, -0.017117761578530566, -3.1415327532565667, 1.0693642370029629E-4]
  $ 291 "tool_w5_6≔p[-0.6421260084190709, 0.66626936215097, 0.20144070436964534, 0.01707995256586941, 3.1415293685776366, -1.3993269374544494E-4]" "noBreak"
  global tool_w5_6=p[-0.6421260084190709, 0.66626936215097, 0.20144070436964534, 0.01707995256586941, 3.1415293685776366, -1.3993269374544494E-4]
  $ 292 "Moving to Waypoints" "noBreak"
  $ 293 "'Setting Change TCP'" "noBreak"
  # 'Setting Change TCP'
  $ 294 "set_change_tc_6≔aaa_set_change_tcp(tool_id_6)" "noBreak"
  global set_change_tc_6= aaa_set_change_tcp (tool_id_6)
  $ 295 "set_user_pc_6≔aaa_set_user_payload(tool_id_6)" "noBreak"
  global set_user_pc_6= aaa_set_user_payload (tool_id_6)
  $ 296 "'Exit Path'" "noBreak"
  # 'Exit Path'
  $ 297 "MoveL" "noBreak"
  $ 298 "tool_w5_6" "noBreak"
  movel(tool_w5_6, a=1.2, v=0.25)
  $ 299 "MoveL" "noBreak"
  $ 300 "tool_w4_6" "noBreak"
  movel(tool_w4_6, a=1.2, v=0.25, r=0.005)
  $ 301 "AAA script at W4" "noBreak"
  $ 302 "set_tool_volt_6≔set_tool_voltage(0)" "noBreak"
  global set_tool_volt_6= set_tool_voltage (0)
  $ 303 "MoveL" "noBreak"
  $ 304 "tool_w3_6" "noBreak"
  movel(tool_w3_6, a=0.2, v=0.02, r=0.01)
  $ 305 "Set Change Payload and COG" "noBreak"
  $ 306 "set_change_pc_6≔aaa_set_change_payload(tool_id_6)" "noBreak"
  global set_change_pc_6= aaa_set_change_payload (tool_id_6)
  $ 307 "tool_w2_6" "noBreak"
  movel(tool_w2_6, a=0.2, v=0.02)
  $ 308 "AAA script at W1" "noBreak"
  $ 309 "'Setting voltage to 0'" "noBreak"
  # 'Setting voltage to 0'
  $ 310 "set_w1_volt_6≔set_tool_voltage(0)" "noBreak"
  global set_w1_volt_6= set_tool_voltage (0)
  $ 311 "tool_w1_6" "noBreak"
  movel(tool_w1_6, a=0.2, v=0.02)
  $ 312 "'Enter Path'" "noBreak"
  # 'Enter Path'
  $ 313 "MoveL" "noBreak"
  $ 314 "tool_w0_6" "noBreak"
  movel(tool_w0_6, a=1.2, v=0.25)
  # end: URCap Program Node
end
